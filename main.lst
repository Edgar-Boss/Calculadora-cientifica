CCS PCH C Compiler, Version 5.015, 5967               28-nov.-20 00:40

               Filename:   C:\Users\SNK93\OneDrive\Escritorio\Calculadora_Cientifica\main.lst

               ROM used:   10382 bytes (32%)
                           Largest free fragment is 22386
               RAM used:   28 (1%) at main() level
                           107 (5%) worst case
               Stack used: 6 locations
               Stack size: 31

*
0000:  GOTO   1F20
.................... #include<18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 31,32
0016:  DATA 33,41
0018:  DATA 34,35
001A:  DATA 36,42
001C:  DATA 37,38
001E:  DATA 39,43
0020:  DATA 2A,30
0022:  DATA 23,44
0024:  DATA 49,6E
0026:  DATA 67,72
0028:  DATA 65,73
002A:  DATA 65,20
002C:  DATA 65,6C
002E:  DATA 20,70
0030:  DATA 61,73
0032:  DATA 73,00
0034:  DATA 41,63
0036:  DATA 63,65
0038:  DATA 73,6F
003A:  DATA 00,00
003C:  DATA 73,65
003E:  DATA 6E,00
0040:  DATA 63,6F
0042:  DATA 73,00
0044:  DATA 74,61
0046:  DATA 6E,00
0048:  DATA 72,61
004A:  DATA 69,7A
004C:  DATA 20,63
004E:  DATA 75,62
0050:  DATA 69,63
0052:  DATA 61,00
*
0206:  TBLRD*+
0208:  MOVF   FF5,F
020A:  BZ    0224
020C:  MOVFF  FF6,19
0210:  MOVFF  FF7,1A
0214:  MOVFF  FF5,26
0218:  RCALL  01B6
021A:  MOVFF  19,FF6
021E:  MOVFF  1A,FF7
0222:  BRA    0206
0224:  RETURN 0
*
02E4:  ADDWF  FE8,W
02E6:  CLRF   FF7
02E8:  RLCF   FF7,F
02EA:  ADDLW  FF
02EC:  MOVWF  FF6
02EE:  MOVLW  02
02F0:  ADDWFC FF7,F
02F2:  TBLRD*-
02F4:  MOVF   FF5,W
02F6:  MOVWF  FFA
02F8:  TBLRD*
02FA:  MOVF   FF5,W
02FC:  MOVWF  FF9
02FE:  DATA 3C,02
0300:  DATA 44,02
0302:  DATA 4C,02
0304:  DATA 54,02
0306:  MOVF   5B,W
0308:  BTFSC  FD8.2
030A:  BRA    03EE
030C:  MOVWF  00
030E:  MOVF   5F,W
0310:  BTFSC  FD8.2
0312:  BRA    03EE
0314:  ADDWF  00,F
0316:  BNC   0320
0318:  MOVLW  81
031A:  ADDWF  00,F
031C:  BC    03EE
031E:  BRA    0328
0320:  MOVLW  7F
0322:  SUBWF  00,F
0324:  BNC   03EE
0326:  BZ    03EE
0328:  MOVFF  5C,63
032C:  MOVF   x60,W
032E:  XORWF  x63,F
0330:  BSF    5C.7
0332:  BSF    x60.7
0334:  MOVF   5E,W
0336:  MULWF  x62
0338:  MOVFF  FF4,65
033C:  MOVF   5D,W
033E:  MULWF  x61
0340:  MOVFF  FF4,03
0344:  MOVFF  FF3,64
0348:  MULWF  x62
034A:  MOVF   FF3,W
034C:  ADDWF  x65,F
034E:  MOVF   FF4,W
0350:  ADDWFC x64,F
0352:  MOVLW  00
0354:  ADDWFC 03,F
0356:  MOVF   5E,W
0358:  MULWF  x61
035A:  MOVF   FF3,W
035C:  ADDWF  x65,F
035E:  MOVF   FF4,W
0360:  ADDWFC x64,F
0362:  MOVLW  00
0364:  CLRF   02
0366:  ADDWFC 03,F
0368:  ADDWFC 02,F
036A:  MOVF   5C,W
036C:  MULWF  x62
036E:  MOVF   FF3,W
0370:  ADDWF  x64,F
0372:  MOVF   FF4,W
0374:  ADDWFC 03,F
0376:  MOVLW  00
0378:  ADDWFC 02,F
037A:  MOVF   5C,W
037C:  MULWF  x61
037E:  MOVF   FF3,W
0380:  ADDWF  03,F
0382:  MOVF   FF4,W
0384:  ADDWFC 02,F
0386:  MOVLW  00
0388:  CLRF   01
038A:  ADDWFC 01,F
038C:  MOVF   5E,W
038E:  MULWF  x60
0390:  MOVF   FF3,W
0392:  ADDWF  x64,F
0394:  MOVF   FF4,W
0396:  ADDWFC 03,F
0398:  MOVLW  00
039A:  ADDWFC 02,F
039C:  ADDWFC 01,F
039E:  MOVF   5D,W
03A0:  MULWF  x60
03A2:  MOVF   FF3,W
03A4:  ADDWF  03,F
03A6:  MOVF   FF4,W
03A8:  ADDWFC 02,F
03AA:  MOVLW  00
03AC:  ADDWFC 01,F
03AE:  MOVF   5C,W
03B0:  MULWF  x60
03B2:  MOVF   FF3,W
03B4:  ADDWF  02,F
03B6:  MOVF   FF4,W
03B8:  ADDWFC 01,F
03BA:  INCF   00,F
03BC:  BTFSC  01.7
03BE:  BRA    03CA
03C0:  RLCF   x64,F
03C2:  RLCF   03,F
03C4:  RLCF   02,F
03C6:  RLCF   01,F
03C8:  DECF   00,F
03CA:  MOVLW  00
03CC:  BTFSS  x64.7
03CE:  BRA    03E4
03D0:  INCF   03,F
03D2:  ADDWFC 02,F
03D4:  ADDWFC 01,F
03D6:  MOVF   01,W
03D8:  BNZ   03E4
03DA:  MOVF   02,W
03DC:  BNZ   03E4
03DE:  MOVF   03,W
03E0:  BNZ   03E4
03E2:  INCF   00,F
03E4:  BTFSC  x63.7
03E6:  BSF    01.7
03E8:  BTFSS  x63.7
03EA:  BCF    01.7
03EC:  BRA    03F6
03EE:  CLRF   00
03F0:  CLRF   01
03F2:  CLRF   02
03F4:  CLRF   03
03F6:  RETURN 0
03F8:  MOVLW  8E
03FA:  MOVWF  00
03FC:  MOVFF  5C,01
0400:  MOVFF  5B,02
0404:  CLRF   03
0406:  MOVF   01,F
0408:  BNZ   041C
040A:  MOVFF  02,01
040E:  CLRF   02
0410:  MOVLW  08
0412:  SUBWF  00,F
0414:  MOVF   01,F
0416:  BNZ   041C
0418:  CLRF   00
041A:  BRA    042C
041C:  BCF    FD8.0
041E:  BTFSC  01.7
0420:  BRA    042A
0422:  RLCF   02,F
0424:  RLCF   01,F
0426:  DECF   00,F
0428:  BRA    041C
042A:  BCF    01.7
042C:  RETURN 0
042E:  MOVLW  80
0430:  BTFSC  FD8.1
0432:  XORWF  x60,F
0434:  CLRF   x65
0436:  CLRF   x66
0438:  MOVFF  5C,64
043C:  MOVF   x60,W
043E:  XORWF  x64,F
0440:  MOVF   5B,W
0442:  BTFSC  FD8.2
0444:  BRA    05FE
0446:  MOVWF  x63
0448:  MOVWF  00
044A:  MOVF   5F,W
044C:  BTFSC  FD8.2
044E:  BRA    0610
0450:  SUBWF  x63,F
0452:  BTFSC  FD8.2
0454:  BRA    0558
0456:  BNC   04D2
0458:  MOVFF  60,69
045C:  BSF    x69.7
045E:  MOVFF  61,68
0462:  MOVFF  62,67
0466:  CLRF   x66
0468:  BCF    FD8.0
046A:  RRCF   x69,F
046C:  RRCF   x68,F
046E:  RRCF   x67,F
0470:  RRCF   x66,F
0472:  DECFSZ x63,F
0474:  BRA    0466
0476:  BTFSS  x64.7
0478:  BRA    0480
047A:  BSF    x65.0
047C:  BRA    0638
047E:  BCF    x65.0
0480:  BCF    x63.0
0482:  BSF    x65.4
0484:  CLRF   FEA
0486:  MOVLW  5E
0488:  MOVWF  FE9
048A:  BRA    065E
048C:  BCF    x65.4
048E:  BTFSC  x64.7
0490:  BRA    04A6
0492:  BTFSS  x63.0
0494:  BRA    04BC
0496:  RRCF   x69,F
0498:  RRCF   x68,F
049A:  RRCF   x67,F
049C:  RRCF   x66,F
049E:  INCF   00,F
04A0:  BTFSC  FD8.2
04A2:  BRA    062E
04A4:  BRA    04BC
04A6:  BTFSC  x69.7
04A8:  BRA    04C2
04AA:  BCF    FD8.0
04AC:  RLCF   x66,F
04AE:  RLCF   x67,F
04B0:  RLCF   x68,F
04B2:  RLCF   x69,F
04B4:  DECF   00,F
04B6:  BTFSC  FD8.2
04B8:  BRA    062E
04BA:  BRA    04A6
04BC:  BSF    x65.6
04BE:  BRA    0596
04C0:  BCF    x65.6
04C2:  MOVFF  5C,64
04C6:  BTFSS  5C.7
04C8:  BRA    04CE
04CA:  BSF    x69.7
04CC:  BRA    0620
04CE:  BCF    x69.7
04D0:  BRA    0620
04D2:  MOVFF  5F,63
04D6:  MOVFF  5F,00
04DA:  MOVF   5B,W
04DC:  SUBWF  x63,F
04DE:  MOVFF  5C,69
04E2:  BSF    x69.7
04E4:  MOVFF  5D,68
04E8:  MOVFF  5E,67
04EC:  CLRF   x66
04EE:  BCF    FD8.0
04F0:  RRCF   x69,F
04F2:  RRCF   x68,F
04F4:  RRCF   x67,F
04F6:  RRCF   x66,F
04F8:  DECFSZ x63,F
04FA:  BRA    04EC
04FC:  BTFSS  x64.7
04FE:  BRA    0506
0500:  BSF    x65.1
0502:  BRA    0638
0504:  BCF    x65.1
0506:  BCF    x63.0
0508:  BSF    x65.5
050A:  CLRF   FEA
050C:  MOVLW  62
050E:  MOVWF  FE9
0510:  BRA    065E
0512:  BCF    x65.5
0514:  BTFSC  x64.7
0516:  BRA    052C
0518:  BTFSS  x63.0
051A:  BRA    0542
051C:  RRCF   x69,F
051E:  RRCF   x68,F
0520:  RRCF   x67,F
0522:  RRCF   x66,F
0524:  INCF   00,F
0526:  BTFSC  FD8.2
0528:  BRA    062E
052A:  BRA    0542
052C:  BTFSC  x69.7
052E:  BRA    0548
0530:  BCF    FD8.0
0532:  RLCF   x66,F
0534:  RLCF   x67,F
0536:  RLCF   x68,F
0538:  RLCF   x69,F
053A:  DECF   00,F
053C:  BTFSC  FD8.2
053E:  BRA    062E
0540:  BRA    052C
0542:  BSF    x65.7
0544:  BRA    0596
0546:  BCF    x65.7
0548:  MOVFF  60,64
054C:  BTFSS  x60.7
054E:  BRA    0554
0550:  BSF    x69.7
0552:  BRA    0620
0554:  BCF    x69.7
0556:  BRA    0620
0558:  MOVFF  60,69
055C:  BSF    x69.7
055E:  MOVFF  61,68
0562:  MOVFF  62,67
0566:  BTFSS  x64.7
0568:  BRA    0572
056A:  BCF    x69.7
056C:  BSF    x65.2
056E:  BRA    0638
0570:  BCF    x65.2
0572:  CLRF   x66
0574:  BCF    x63.0
0576:  CLRF   FEA
0578:  MOVLW  5E
057A:  MOVWF  FE9
057C:  BRA    065E
057E:  BTFSC  x64.7
0580:  BRA    05BA
0582:  MOVFF  5C,64
0586:  BTFSS  x63.0
0588:  BRA    0596
058A:  RRCF   x69,F
058C:  RRCF   x68,F
058E:  RRCF   x67,F
0590:  RRCF   x66,F
0592:  INCF   00,F
0594:  BZ    062E
0596:  BTFSS  x66.7
0598:  BRA    05B0
059A:  INCF   x67,F
059C:  BNZ   05B0
059E:  INCF   x68,F
05A0:  BNZ   05B0
05A2:  INCF   x69,F
05A4:  BNZ   05B0
05A6:  RRCF   x69,F
05A8:  RRCF   x68,F
05AA:  RRCF   x67,F
05AC:  INCF   00,F
05AE:  BZ    062E
05B0:  BTFSC  x65.6
05B2:  BRA    04C0
05B4:  BTFSC  x65.7
05B6:  BRA    0546
05B8:  BRA    05F2
05BA:  MOVLW  80
05BC:  XORWF  x69,F
05BE:  BTFSS  x69.7
05C0:  BRA    05CA
05C2:  BRA    0638
05C4:  MOVFF  60,64
05C8:  BRA    05DE
05CA:  MOVFF  5C,64
05CE:  MOVF   x69,F
05D0:  BNZ   05DE
05D2:  MOVF   x68,F
05D4:  BNZ   05DE
05D6:  MOVF   x67,F
05D8:  BNZ   05DE
05DA:  CLRF   00
05DC:  BRA    0620
05DE:  BTFSC  x69.7
05E0:  BRA    05F2
05E2:  BCF    FD8.0
05E4:  RLCF   x66,F
05E6:  RLCF   x67,F
05E8:  RLCF   x68,F
05EA:  RLCF   x69,F
05EC:  DECFSZ 00,F
05EE:  BRA    05DE
05F0:  BRA    062E
05F2:  BTFSS  x64.7
05F4:  BRA    05FA
05F6:  BSF    x69.7
05F8:  BRA    0620
05FA:  BCF    x69.7
05FC:  BRA    0620
05FE:  MOVFF  5F,00
0602:  MOVFF  60,69
0606:  MOVFF  61,68
060A:  MOVFF  62,67
060E:  BRA    0620
0610:  MOVFF  5B,00
0614:  MOVFF  5C,69
0618:  MOVFF  5D,68
061C:  MOVFF  5E,67
0620:  MOVFF  69,01
0624:  MOVFF  68,02
0628:  MOVFF  67,03
062C:  BRA    0696
062E:  CLRF   00
0630:  CLRF   01
0632:  CLRF   02
0634:  CLRF   03
0636:  BRA    0696
0638:  CLRF   x66
063A:  COMF   x67,F
063C:  COMF   x68,F
063E:  COMF   x69,F
0640:  COMF   x66,F
0642:  INCF   x66,F
0644:  BNZ   0650
0646:  INCF   x67,F
0648:  BNZ   0650
064A:  INCF   x68,F
064C:  BNZ   0650
064E:  INCF   x69,F
0650:  BTFSC  x65.0
0652:  BRA    047E
0654:  BTFSC  x65.1
0656:  BRA    0504
0658:  BTFSC  x65.2
065A:  BRA    0570
065C:  BRA    05C4
065E:  MOVF   FEF,W
0660:  ADDWF  x67,F
0662:  BNC   066E
0664:  INCF   x68,F
0666:  BNZ   066E
0668:  INCF   x69,F
066A:  BTFSC  FD8.2
066C:  BSF    x63.0
066E:  MOVF   FED,F
0670:  MOVF   FEF,W
0672:  ADDWF  x68,F
0674:  BNC   067C
0676:  INCF   x69,F
0678:  BTFSC  FD8.2
067A:  BSF    x63.0
067C:  MOVF   FED,F
067E:  MOVF   FEF,W
0680:  BTFSC  FEF.7
0682:  BRA    0686
0684:  XORLW  80
0686:  ADDWF  x69,F
0688:  BTFSC  FD8.0
068A:  BSF    x63.0
068C:  BTFSC  x65.4
068E:  BRA    048C
0690:  BTFSC  x65.5
0692:  BRA    0512
0694:  BRA    057E
0696:  RETURN 0
0698:  MOVF   20,W
069A:  CLRF   01
069C:  SUBWF  1F,W
069E:  BC    06A6
06A0:  MOVFF  1F,00
06A4:  BRA    06BE
06A6:  CLRF   00
06A8:  MOVLW  08
06AA:  MOVWF  21
06AC:  RLCF   1F,F
06AE:  RLCF   00,F
06B0:  MOVF   20,W
06B2:  SUBWF  00,W
06B4:  BTFSC  FD8.0
06B6:  MOVWF  00
06B8:  RLCF   01,F
06BA:  DECFSZ 21,F
06BC:  BRA    06AC
06BE:  RETURN 0
06C0:  MOVLW  20
06C2:  BTFSS  1A.4
06C4:  MOVLW  30
06C6:  MOVWF  1B
06C8:  MOVFF  19,00
06CC:  BTFSS  19.7
06CE:  BRA    06E0
06D0:  COMF   00,F
06D2:  INCF   00,F
06D4:  MOVFF  00,19
06D8:  MOVLW  2D
06DA:  MOVWF  1B
06DC:  BSF    1A.7
06DE:  BSF    1A.0
06E0:  MOVF   01,W
06E2:  MOVFF  19,1F
06E6:  MOVLW  64
06E8:  MOVWF  20
06EA:  RCALL  0698
06EC:  MOVFF  00,19
06F0:  MOVLW  30
06F2:  ADDWF  01,W
06F4:  MOVWF  1C
06F6:  MOVFF  19,1F
06FA:  MOVLW  0A
06FC:  MOVWF  20
06FE:  RCALL  0698
0700:  MOVLW  30
0702:  ADDWF  00,W
0704:  MOVWF  1E
0706:  MOVLW  30
0708:  ADDWF  01,W
070A:  MOVWF  1D
070C:  MOVFF  1B,00
0710:  MOVLW  30
0712:  SUBWF  1C,W
0714:  BZ    071E
0716:  BSF    1A.1
0718:  BTFSC  1A.7
071A:  BSF    1A.2
071C:  BRA    0742
071E:  MOVFF  1B,1C
0722:  MOVLW  20
0724:  MOVWF  1B
0726:  MOVLW  30
0728:  SUBWF  1D,W
072A:  BZ    0734
072C:  BSF    1A.0
072E:  BTFSC  1A.7
0730:  BSF    1A.1
0732:  BRA    0742
0734:  BTFSS  FD8.2
0736:  BSF    1A.0
0738:  BNZ   0742
073A:  MOVFF  1C,1D
073E:  MOVLW  20
0740:  MOVWF  1C
0742:  BTFSC  1A.2
0744:  BRA    0750
0746:  BTFSC  1A.1
0748:  BRA    0756
074A:  BTFSC  1A.0
074C:  BRA    075C
074E:  BRA    0762
0750:  MOVFF  1B,26
0754:  RCALL  01B6
0756:  MOVFF  1C,26
075A:  RCALL  01B6
075C:  MOVFF  1D,26
0760:  RCALL  01B6
0762:  MOVFF  1E,26
0766:  RCALL  01B6
0768:  RETURN 0
076A:  MOVFF  58,5F
076E:  MOVF   5C,W
0770:  XORWF  5F,F
0772:  BTFSS  5F.7
0774:  BRA    0780
0776:  BCF    FD8.2
0778:  BCF    FD8.0
077A:  BTFSC  58.7
077C:  BSF    FD8.0
077E:  BRA    07DE
0780:  MOVFF  58,5F
0784:  MOVFF  5B,60
0788:  MOVF   57,W
078A:  SUBWF  x60,F
078C:  BZ    079A
078E:  BTFSS  5F.7
0790:  BRA    07DE
0792:  MOVF   FD8,W
0794:  XORLW  01
0796:  MOVWF  FD8
0798:  BRA    07DE
079A:  MOVFF  5C,60
079E:  MOVF   58,W
07A0:  SUBWF  x60,F
07A2:  BZ    07B0
07A4:  BTFSS  5F.7
07A6:  BRA    07DE
07A8:  MOVF   FD8,W
07AA:  XORLW  01
07AC:  MOVWF  FD8
07AE:  BRA    07DE
07B0:  MOVFF  5D,60
07B4:  MOVF   59,W
07B6:  SUBWF  x60,F
07B8:  BZ    07C6
07BA:  BTFSS  5F.7
07BC:  BRA    07DE
07BE:  MOVF   FD8,W
07C0:  XORLW  01
07C2:  MOVWF  FD8
07C4:  BRA    07DE
07C6:  MOVFF  5E,60
07CA:  MOVF   5A,W
07CC:  SUBWF  x60,F
07CE:  BZ    07DC
07D0:  BTFSS  5F.7
07D2:  BRA    07DE
07D4:  MOVF   FD8,W
07D6:  XORLW  01
07D8:  MOVWF  FD8
07DA:  BRA    07DE
07DC:  BCF    FD8.0
07DE:  RETURN 0
07E0:  MOVF   3E,W
07E2:  BTFSC  FD8.2
07E4:  BRA    0930
07E6:  MOVWF  4A
07E8:  MOVF   42,W
07EA:  BTFSC  FD8.2
07EC:  BRA    0930
07EE:  SUBWF  4A,F
07F0:  BNC   07FC
07F2:  MOVLW  7F
07F4:  ADDWF  4A,F
07F6:  BTFSC  FD8.0
07F8:  BRA    0930
07FA:  BRA    0808
07FC:  MOVLW  81
07FE:  SUBWF  4A,F
0800:  BTFSS  FD8.0
0802:  BRA    0930
0804:  BTFSC  FD8.2
0806:  BRA    0930
0808:  MOVFF  4A,00
080C:  CLRF   01
080E:  CLRF   02
0810:  CLRF   03
0812:  CLRF   49
0814:  MOVFF  3F,48
0818:  BSF    48.7
081A:  MOVFF  40,47
081E:  MOVFF  41,46
0822:  MOVLW  19
0824:  MOVWF  4A
0826:  MOVF   45,W
0828:  SUBWF  46,F
082A:  BC    0846
082C:  MOVLW  01
082E:  SUBWF  47,F
0830:  BC    0846
0832:  SUBWF  48,F
0834:  BC    0846
0836:  SUBWF  49,F
0838:  BC    0846
083A:  INCF   49,F
083C:  INCF   48,F
083E:  INCF   47,F
0840:  MOVF   45,W
0842:  ADDWF  46,F
0844:  BRA    0896
0846:  MOVF   44,W
0848:  SUBWF  47,F
084A:  BC    0870
084C:  MOVLW  01
084E:  SUBWF  48,F
0850:  BC    0870
0852:  SUBWF  49,F
0854:  BC    0870
0856:  INCF   49,F
0858:  INCF   48,F
085A:  MOVF   44,W
085C:  ADDWF  47,F
085E:  MOVF   45,W
0860:  ADDWF  46,F
0862:  BNC   0896
0864:  INCF   47,F
0866:  BNZ   0896
0868:  INCF   48,F
086A:  BNZ   0896
086C:  INCF   49,F
086E:  BRA    0896
0870:  MOVF   43,W
0872:  IORLW  80
0874:  SUBWF  48,F
0876:  BC    0894
0878:  MOVLW  01
087A:  SUBWF  49,F
087C:  BC    0894
087E:  INCF   49,F
0880:  MOVF   43,W
0882:  IORLW  80
0884:  ADDWF  48,F
0886:  MOVF   44,W
0888:  ADDWF  47,F
088A:  BNC   085E
088C:  INCF   48,F
088E:  BNZ   085E
0890:  INCF   49,F
0892:  BRA    085E
0894:  BSF    03.0
0896:  DECFSZ 4A,F
0898:  BRA    089C
089A:  BRA    08B2
089C:  BCF    FD8.0
089E:  RLCF   46,F
08A0:  RLCF   47,F
08A2:  RLCF   48,F
08A4:  RLCF   49,F
08A6:  BCF    FD8.0
08A8:  RLCF   03,F
08AA:  RLCF   02,F
08AC:  RLCF   01,F
08AE:  RLCF   4B,F
08B0:  BRA    0826
08B2:  BTFSS  4B.0
08B4:  BRA    08C2
08B6:  BCF    FD8.0
08B8:  RRCF   01,F
08BA:  RRCF   02,F
08BC:  RRCF   03,F
08BE:  RRCF   4B,F
08C0:  BRA    08C6
08C2:  DECF   00,F
08C4:  BZ    0930
08C6:  BTFSC  4B.7
08C8:  BRA    0906
08CA:  BCF    FD8.0
08CC:  RLCF   46,F
08CE:  RLCF   47,F
08D0:  RLCF   48,F
08D2:  RLCF   49,F
08D4:  MOVF   45,W
08D6:  SUBWF  46,F
08D8:  BC    08E8
08DA:  MOVLW  01
08DC:  SUBWF  47,F
08DE:  BC    08E8
08E0:  SUBWF  48,F
08E2:  BC    08E8
08E4:  SUBWF  49,F
08E6:  BNC   091C
08E8:  MOVF   44,W
08EA:  SUBWF  47,F
08EC:  BC    08F8
08EE:  MOVLW  01
08F0:  SUBWF  48,F
08F2:  BC    08F8
08F4:  SUBWF  49,F
08F6:  BNC   091C
08F8:  MOVF   43,W
08FA:  IORLW  80
08FC:  SUBWF  48,F
08FE:  BC    0906
0900:  MOVLW  01
0902:  SUBWF  49,F
0904:  BNC   091C
0906:  INCF   03,F
0908:  BNZ   091C
090A:  INCF   02,F
090C:  BNZ   091C
090E:  INCF   01,F
0910:  BNZ   091C
0912:  INCF   00,F
0914:  BZ    0930
0916:  RRCF   01,F
0918:  RRCF   02,F
091A:  RRCF   03,F
091C:  MOVFF  3F,4A
0920:  MOVF   43,W
0922:  XORWF  4A,F
0924:  BTFSS  4A.7
0926:  BRA    092C
0928:  BSF    01.7
092A:  BRA    0938
092C:  BCF    01.7
092E:  BRA    0938
0930:  CLRF   00
0932:  CLRF   01
0934:  CLRF   02
0936:  CLRF   03
0938:  RETURN 0
093A:  MOVLW  8E
093C:  MOVWF  00
093E:  MOVF   57,W
0940:  SUBWF  00,F
0942:  MOVFF  58,02
0946:  MOVFF  59,01
094A:  BSF    02.7
094C:  MOVF   00,F
094E:  BZ    0962
0950:  BCF    FD8.0
0952:  MOVF   02,F
0954:  BNZ   095A
0956:  MOVF   01,F
0958:  BZ    0962
095A:  RRCF   02,F
095C:  RRCF   01,F
095E:  DECFSZ 00,F
0960:  BRA    0950
0962:  BTFSS  58.7
0964:  BRA    0970
0966:  COMF   01,F
0968:  COMF   02,F
096A:  INCF   01,F
096C:  BTFSC  FD8.2
096E:  INCF   02,F
0970:  RETURN 0
*
0D12:  MOVF   26,W
0D14:  SUBLW  B6
0D16:  MOVWF  26
0D18:  CLRF   03
0D1A:  MOVFF  27,2A
0D1E:  BSF    27.7
0D20:  BCF    FD8.0
0D22:  RRCF   27,F
0D24:  RRCF   28,F
0D26:  RRCF   29,F
0D28:  RRCF   03,F
0D2A:  RRCF   02,F
0D2C:  RRCF   01,F
0D2E:  RRCF   00,F
0D30:  DECFSZ 26,F
0D32:  BRA    0D20
0D34:  BTFSS  2A.7
0D36:  BRA    0D4E
0D38:  COMF   00,F
0D3A:  COMF   01,F
0D3C:  COMF   02,F
0D3E:  COMF   03,F
0D40:  INCF   00,F
0D42:  BTFSC  FD8.2
0D44:  INCF   01,F
0D46:  BTFSC  FD8.2
0D48:  INCF   02,F
0D4A:  BTFSC  FD8.2
0D4C:  INCF   03,F
0D4E:  GOTO   0E30 (RETURN)
0D52:  BTFSC  FD8.1
0D54:  BRA    0D5C
0D56:  CLRF   FEA
0D58:  MOVLW  2E
0D5A:  MOVWF  FE9
0D5C:  CLRF   00
0D5E:  CLRF   01
0D60:  CLRF   02
0D62:  CLRF   03
0D64:  CLRF   2E
0D66:  CLRF   2F
0D68:  CLRF   30
0D6A:  CLRF   31
0D6C:  MOVF   2D,W
0D6E:  IORWF  2C,W
0D70:  IORWF  2B,W
0D72:  IORWF  2A,W
0D74:  BZ    0DCE
0D76:  MOVLW  20
0D78:  MOVWF  32
0D7A:  BCF    FD8.0
0D7C:  RLCF   26,F
0D7E:  RLCF   27,F
0D80:  RLCF   28,F
0D82:  RLCF   29,F
0D84:  RLCF   2E,F
0D86:  RLCF   2F,F
0D88:  RLCF   30,F
0D8A:  RLCF   31,F
0D8C:  MOVF   2D,W
0D8E:  SUBWF  31,W
0D90:  BNZ   0DA2
0D92:  MOVF   2C,W
0D94:  SUBWF  30,W
0D96:  BNZ   0DA2
0D98:  MOVF   2B,W
0D9A:  SUBWF  2F,W
0D9C:  BNZ   0DA2
0D9E:  MOVF   2A,W
0DA0:  SUBWF  2E,W
0DA2:  BNC   0DC2
0DA4:  MOVF   2A,W
0DA6:  SUBWF  2E,F
0DA8:  MOVF   2B,W
0DAA:  BTFSS  FD8.0
0DAC:  INCFSZ 2B,W
0DAE:  SUBWF  2F,F
0DB0:  MOVF   2C,W
0DB2:  BTFSS  FD8.0
0DB4:  INCFSZ 2C,W
0DB6:  SUBWF  30,F
0DB8:  MOVF   2D,W
0DBA:  BTFSS  FD8.0
0DBC:  INCFSZ 2D,W
0DBE:  SUBWF  31,F
0DC0:  BSF    FD8.0
0DC2:  RLCF   00,F
0DC4:  RLCF   01,F
0DC6:  RLCF   02,F
0DC8:  RLCF   03,F
0DCA:  DECFSZ 32,F
0DCC:  BRA    0D7A
0DCE:  MOVFF  2E,FEF
0DD2:  MOVFF  2F,FEC
0DD6:  MOVFF  30,FEC
0DDA:  MOVFF  31,FEC
0DDE:  RETURN 0
0DE0:  MOVF   FE9,W
0DE2:  MOVWF  1E
0DE4:  MOVF   1D,W
0DE6:  MOVWF  20
0DE8:  BZ    0E1E
0DEA:  MOVFF  1C,5E
0DEE:  MOVFF  1B,5D
0DF2:  MOVFF  1A,5C
0DF6:  MOVFF  19,5B
0DFA:  CLRF   x62
0DFC:  CLRF   x61
0DFE:  MOVLW  20
0E00:  MOVWF  x60
0E02:  MOVLW  82
0E04:  MOVWF  5F
0E06:  CALL   0306
0E0A:  MOVFF  03,1C
0E0E:  MOVFF  02,1B
0E12:  MOVFF  01,1A
0E16:  MOVFF  00,19
0E1A:  DECFSZ 20,F
0E1C:  BRA    0DEA
0E1E:  MOVFF  1C,29
0E22:  MOVFF  1B,28
0E26:  MOVFF  1A,27
0E2A:  MOVFF  19,26
0E2E:  BRA    0D12
0E30:  MOVFF  03,1C
0E34:  MOVFF  02,1B
0E38:  MOVFF  01,1A
0E3C:  MOVFF  00,19
0E40:  BTFSS  1C.7
0E42:  BRA    0E5E
0E44:  DECF   1E,F
0E46:  BSF    1E.5
0E48:  COMF   19,F
0E4A:  COMF   1A,F
0E4C:  COMF   1B,F
0E4E:  COMF   1C,F
0E50:  INCF   19,F
0E52:  BTFSC  FD8.2
0E54:  INCF   1A,F
0E56:  BTFSC  FD8.2
0E58:  INCF   1B,F
0E5A:  BTFSC  FD8.2
0E5C:  INCF   1C,F
0E5E:  MOVLW  3B
0E60:  MOVWF  25
0E62:  MOVLW  9A
0E64:  MOVWF  24
0E66:  MOVLW  CA
0E68:  MOVWF  23
0E6A:  CLRF   22
0E6C:  MOVLW  0A
0E6E:  MOVWF  20
0E70:  MOVF   1D,W
0E72:  BTFSC  FD8.2
0E74:  INCF   1E,F
0E76:  BSF    FD8.1
0E78:  CLRF   FEA
0E7A:  MOVLW  19
0E7C:  MOVWF  FE9
0E7E:  MOVFF  1C,29
0E82:  MOVFF  1B,28
0E86:  MOVFF  1A,27
0E8A:  MOVFF  19,26
0E8E:  MOVFF  25,2D
0E92:  MOVFF  24,2C
0E96:  MOVFF  23,2B
0E9A:  MOVFF  22,2A
0E9E:  RCALL  0D52
0EA0:  MOVF   01,W
0EA2:  MOVF   00,F
0EA4:  BNZ   0EC4
0EA6:  INCF   1D,W
0EA8:  SUBWF  20,W
0EAA:  BZ    0EC4
0EAC:  MOVF   1E,W
0EAE:  BZ    0EC8
0EB0:  ANDLW  0F
0EB2:  SUBWF  20,W
0EB4:  BZ    0EB8
0EB6:  BC    0F2E
0EB8:  BTFSC  1E.7
0EBA:  BRA    0F2E
0EBC:  BTFSC  1E.6
0EBE:  BRA    0EC8
0EC0:  MOVLW  20
0EC2:  BRA    0F24
0EC4:  MOVLW  20
0EC6:  ANDWF  1E,F
0EC8:  BTFSS  1E.5
0ECA:  BRA    0EE6
0ECC:  BCF    1E.5
0ECE:  MOVF   1D,W
0ED0:  BTFSS  FD8.2
0ED2:  DECF   1E,F
0ED4:  MOVF   00,W
0ED6:  MOVWF  1E
0ED8:  MOVLW  2D
0EDA:  MOVWF  26
0EDC:  CALL   01B6
0EE0:  MOVF   1E,W
0EE2:  MOVWF  00
0EE4:  CLRF   1E
0EE6:  MOVF   1D,W
0EE8:  SUBWF  20,W
0EEA:  BNZ   0F02
0EEC:  MOVF   00,W
0EEE:  MOVWF  1E
0EF0:  MOVLW  2E
0EF2:  MOVWF  26
0EF4:  CALL   01B6
0EF8:  MOVF   1E,W
0EFA:  MOVWF  00
0EFC:  MOVLW  20
0EFE:  ANDWF  1E,F
0F00:  MOVLW  00
0F02:  MOVLW  30
0F04:  BTFSS  1E.5
0F06:  BRA    0F24
0F08:  BCF    1E.5
0F0A:  MOVF   1D,W
0F0C:  BTFSS  FD8.2
0F0E:  DECF   1E,F
0F10:  MOVF   00,W
0F12:  MOVWF  1E
0F14:  MOVLW  2D
0F16:  MOVWF  26
0F18:  CALL   01B6
0F1C:  MOVF   1E,W
0F1E:  MOVWF  00
0F20:  CLRF   1E
0F22:  MOVLW  30
0F24:  ADDWF  00,F
0F26:  MOVFF  00,26
0F2A:  CALL   01B6
0F2E:  BCF    FD8.1
0F30:  MOVFF  25,29
0F34:  MOVFF  24,28
0F38:  MOVFF  23,27
0F3C:  MOVFF  22,26
0F40:  CLRF   2D
0F42:  CLRF   2C
0F44:  CLRF   2B
0F46:  MOVLW  0A
0F48:  MOVWF  2A
0F4A:  RCALL  0D52
0F4C:  MOVFF  03,25
0F50:  MOVFF  02,24
0F54:  MOVFF  01,23
0F58:  MOVFF  00,22
0F5C:  DECFSZ 20,F
0F5E:  BRA    0E76
0F60:  RETURN 0
*
14CE:  MOVLW  8E
14D0:  MOVWF  00
14D2:  MOVFF  3C,01
14D6:  MOVFF  3B,02
14DA:  CLRF   03
14DC:  BTFSS  3C.7
14DE:  BRA    14EA
14E0:  COMF   01,F
14E2:  COMF   02,F
14E4:  INCF   02,F
14E6:  BNZ   14EA
14E8:  INCF   01,F
14EA:  MOVF   01,F
14EC:  BNZ   1500
14EE:  MOVFF  02,01
14F2:  CLRF   02
14F4:  MOVLW  08
14F6:  SUBWF  00,F
14F8:  MOVF   01,F
14FA:  BNZ   1500
14FC:  CLRF   00
14FE:  BRA    1514
1500:  BCF    FD8.0
1502:  BTFSC  01.7
1504:  BRA    150E
1506:  RLCF   02,F
1508:  RLCF   01,F
150A:  DECF   00,F
150C:  BRA    1500
150E:  BTFSC  3C.7
1510:  BRA    1514
1512:  BCF    01.7
1514:  RETURN 0
....................  
.................... #list 
....................  
.................... #fuses hs,nowdt 
.................... #use delay(clock=4000000) 
*
0054:  CLRF   FEA
0056:  MOVLW  27
0058:  MOVWF  FE9
005A:  MOVF   FEF,W
005C:  BZ    007A
005E:  MOVLW  01
0060:  MOVWF  01
0062:  CLRF   00
0064:  DECFSZ 00,F
0066:  BRA    0064
0068:  DECFSZ 01,F
006A:  BRA    0062
006C:  MOVLW  4A
006E:  MOVWF  00
0070:  DECFSZ 00,F
0072:  BRA    0070
0074:  BRA    0076
0076:  DECFSZ FEF,F
0078:  BRA    005E
007A:  RETURN 0
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00A0:  MOVLW  0F
00A2:  ANDWF  F95,W
00A4:  IORLW  F0
00A6:  MOVWF  F95
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A8:  BSF    F8C.2
....................    delay_cycles(1); 
00AA:  NOP   
....................    lcd_output_enable(1); 
00AC:  BSF    F8C.0
....................    delay_cycles(1); 
00AE:  NOP   
....................    high = lcd_read_nibble(); 
00B0:  RCALL  0094
00B2:  MOVFF  01,2E
....................        
....................    lcd_output_enable(0); 
00B6:  BCF    F8C.0
....................    delay_cycles(1); 
00B8:  NOP   
....................    lcd_output_enable(1); 
00BA:  BSF    F8C.0
....................    delay_us(1); 
00BC:  NOP   
....................    low = lcd_read_nibble(); 
00BE:  RCALL  0094
00C0:  MOVFF  01,2D
....................        
....................    lcd_output_enable(0); 
00C4:  BCF    F8C.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00C6:  MOVLW  0F
00C8:  ANDWF  F95,W
00CA:  MOVWF  F95
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00CC:  SWAPF  2E,W
00CE:  MOVWF  00
00D0:  MOVLW  F0
00D2:  ANDWF  00,F
00D4:  MOVF   00,W
00D6:  IORWF  2D,W
00D8:  MOVWF  01
00DA:  GOTO   00E8 (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0094:  MOVF   F83,W
0096:  MOVWF  00
0098:  SWAPF  00,W
009A:  ANDLW  0F
009C:  MOVWF  01
....................   #endif 
009E:  RETURN 0
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
007C:  SWAPF  2E,W
007E:  ANDLW  F0
0080:  MOVWF  00
0082:  MOVLW  0F
0084:  ANDWF  F8C,W
0086:  IORWF  00,W
0088:  MOVWF  F8C
....................   #endif 
....................        
....................    delay_cycles(1); 
008A:  NOP   
....................    lcd_output_enable(1); 
008C:  BSF    F8C.0
....................    delay_us(2); 
008E:  BRA    0090
....................    lcd_output_enable(0); 
0090:  BCF    F8C.0
0092:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00DE:  BCF    F95.0
....................    lcd_rs_tris(); 
00E0:  BCF    F95.1
....................    lcd_rw_tris(); 
00E2:  BCF    F95.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00E4:  BCF    F8C.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
00E6:  BRA    00A0
00E8:  MOVFF  01,2D
00EC:  BTFSC  01.7
00EE:  BRA    00E6
....................    lcd_output_rs(address); 
00F0:  BCF    F8C.1
00F2:  BTFSC  2B.0
00F4:  BSF    F8C.1
....................    delay_cycles(1); 
00F6:  NOP   
....................    lcd_output_rw(0); 
00F8:  BCF    F8C.2
....................    delay_cycles(1); 
00FA:  NOP   
....................    lcd_output_enable(0); 
00FC:  BCF    F8C.0
....................    lcd_send_nibble(n >> 4); 
00FE:  SWAPF  2C,W
0100:  MOVWF  2D
0102:  MOVLW  0F
0104:  ANDWF  2D,F
0106:  MOVFF  2D,2E
010A:  RCALL  007C
....................    lcd_send_nibble(n & 0xf); 
010C:  MOVF   2C,W
010E:  ANDLW  0F
0110:  MOVWF  2D
0112:  MOVWF  2E
0114:  RCALL  007C
0116:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0118:  MOVLW  28
011A:  MOVWF  1A
011C:  MOVLW  0C
011E:  MOVWF  1B
0120:  MOVLW  01
0122:  MOVWF  1C
0124:  MOVLW  06
0126:  MOVWF  1D
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0128:  BCF    F8C.0
....................    lcd_output_rs(0); 
012A:  BCF    F8C.1
....................    lcd_output_rw(0); 
012C:  BCF    F8C.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
012E:  MOVLW  0F
0130:  ANDWF  F95,W
0132:  MOVWF  F95
....................   #endif 
....................    lcd_enable_tris(); 
0134:  BCF    F95.0
....................    lcd_rs_tris(); 
0136:  BCF    F95.1
....................    lcd_rw_tris(); 
0138:  BCF    F95.2
....................  #endif 
....................      
....................    delay_ms(15); 
013A:  MOVLW  0F
013C:  MOVWF  27
013E:  RCALL  0054
....................    for(i=1;i<=3;++i) 
0140:  MOVLW  01
0142:  MOVWF  19
0144:  MOVF   19,W
0146:  SUBLW  03
0148:  BNC   015A
....................    { 
....................        lcd_send_nibble(3); 
014A:  MOVLW  03
014C:  MOVWF  2E
014E:  RCALL  007C
....................        delay_ms(5); 
0150:  MOVLW  05
0152:  MOVWF  27
0154:  RCALL  0054
0156:  INCF   19,F
0158:  BRA    0144
....................    } 
....................     
....................    lcd_send_nibble(2); 
015A:  MOVLW  02
015C:  MOVWF  2E
015E:  RCALL  007C
....................    delay_ms(5); 
0160:  MOVLW  05
0162:  MOVWF  27
0164:  RCALL  0054
....................    for(i=0;i<=3;++i) 
0166:  CLRF   19
0168:  MOVF   19,W
016A:  SUBLW  03
016C:  BNC   018C
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
016E:  CLRF   03
0170:  MOVF   19,W
0172:  ADDLW  1A
0174:  MOVWF  FE9
0176:  MOVLW  00
0178:  ADDWFC 03,W
017A:  MOVWF  FEA
017C:  MOVFF  FEF,1E
0180:  CLRF   2B
0182:  MOVFF  1E,2C
0186:  RCALL  00DE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0188:  INCF   19,F
018A:  BRA    0168
018C:  GOTO   1F5A (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0194:  DECFSZ 28,W
0196:  BRA    019A
0198:  BRA    01A0
....................       address=LCD_LINE_TWO; 
019A:  MOVLW  40
019C:  MOVWF  29
019E:  BRA    01A2
....................    else 
....................       address=0; 
01A0:  CLRF   29
....................       
....................    address+=x-1; 
01A2:  MOVLW  01
01A4:  SUBWF  27,W
01A6:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address); 
01A8:  MOVF   29,W
01AA:  IORLW  80
01AC:  MOVWF  2A
01AE:  CLRF   2B
01B0:  MOVWF  2C
01B2:  RCALL  00DE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01B4:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01B6:  MOVF   26,W
01B8:  XORLW  07
01BA:  BZ    01CA
01BC:  XORLW  0B
01BE:  BZ    01D4
01C0:  XORLW  06
01C2:  BZ    01E4
01C4:  XORLW  02
01C6:  BZ    01F0
01C8:  BRA    01FA
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01CA:  MOVLW  01
01CC:  MOVWF  27
01CE:  MOVWF  28
01D0:  RCALL  0194
01D2:  BRA    0204
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01D4:  CLRF   2B
01D6:  MOVLW  01
01D8:  MOVWF  2C
01DA:  RCALL  00DE
....................                      delay_ms(2); 
01DC:  MOVLW  02
01DE:  MOVWF  27
01E0:  RCALL  0054
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01E2:  BRA    0204
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01E4:  MOVLW  01
01E6:  MOVWF  27
01E8:  MOVLW  02
01EA:  MOVWF  28
01EC:  RCALL  0194
01EE:  BRA    0204
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01F0:  CLRF   2B
01F2:  MOVLW  10
01F4:  MOVWF  2C
01F6:  RCALL  00DE
01F8:  BRA    0204
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01FA:  MOVLW  01
01FC:  MOVWF  2B
01FE:  MOVFF  26,2C
0202:  RCALL  00DE
....................      #endif 
....................    } 
0204:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include<kbd1.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                     KBD_LIB.C by Redraven                         //// 
.................... ////                                                                   //// 
.................... ////                     Derived from KBDD.C                           //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
....................  
.................... #if defined(__PCH__) 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 0xF81              // This puts the entire structure 
.................... #else 
....................    #byte kbd = 0xF83              // This puts the entire structure 
.................... #endif 
.................... #else 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 6                  // on to port B (at address 6) 
.................... #else 
....................    #byte kbd = 8                  // on to port D (at address 8) 
.................... #endif 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B0) 
....................  
.................... #define COL0 (1 << 0) // PIN_B0 
.................... #define COL1 (1 << 1) // PIN_B1 
.................... #define COL2 (1 << 2) // PIN_B2 
.................... #define COL3 (1 << 3) // PIN_B3 
....................  
.................... #define ROW0 (1 << 4) // PIN_B4 
.................... #define ROW1 (1 << 5) // PIN_B5 
.................... #define ROW2 (1 << 6) // PIN_B6 
.................... #define ROW3 (1 << 7) // PIN_B7 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2|COL3) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][4] = {{'1','2','3','A'}, 
....................                          {'4','5','6','B'}, 
....................                          {'7','8','9','C'}, 
....................                          {'*','0','#','D'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
.................... void kbd_init() { 
*
0190:  GOTO   1F5E (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static byte kbd_call_count; 
....................    static short int kbd_down; 
....................    static char last_key; 
....................    static byte col; 
....................  
....................    byte kchar; 
....................    byte row; 
....................  
....................    kchar='\0'; 
*
0226:  CLRF   19
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
0228:  INCF   04,F
022A:  MOVF   04,W
022C:  SUBLW  21
022E:  BC    02DA
....................        switch (col) { 
0230:  MOVF   07,W
0232:  ADDLW  FC
0234:  BC    025A
0236:  ADDLW  04
0238:  GOTO   02E4
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
023C:  MOVLW  FE
023E:  MOVWF  F93
....................                     kbd=~COL0&ALL_PINS; 
0240:  MOVWF  F81
....................                     break; 
0242:  BRA    025A
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
0244:  MOVLW  FD
0246:  MOVWF  F93
....................                     kbd=~COL1&ALL_PINS; 
0248:  MOVWF  F81
....................                     break; 
024A:  BRA    025A
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
024C:  MOVLW  FB
024E:  MOVWF  F93
....................                     kbd=~COL2&ALL_PINS; 
0250:  MOVWF  F81
....................                     break; 
0252:  BRA    025A
....................          case 3   : set_tris_kbd(ALL_PINS&~COL3); 
0254:  MOVLW  F7
0256:  MOVWF  F93
....................                     kbd=~COL3&ALL_PINS; 
0258:  MOVWF  F81
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
025A:  BTFSS  05.0
025C:  BRA    0270
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
025E:  MOVF   F81,W
0260:  ANDLW  F0
0262:  SUBLW  F0
0264:  BNZ   026E
....................            kbd_down=false; 
0266:  BCF    05.0
....................            kchar=last_key; 
0268:  MOVFF  06,19
....................            last_key='\0'; 
026C:  CLRF   06
....................          } 
....................        } else { 
026E:  BRA    02D8
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
0270:  MOVF   F81,W
0272:  ANDLW  F0
0274:  SUBLW  F0
0276:  BZ    02CE
....................              if((kbd & ROW0)==0) 
0278:  MOVF   F81,W
027A:  ANDLW  10
027C:  BNZ   0282
....................                row=0; 
027E:  CLRF   1A
0280:  BRA    02A4
....................              else if((kbd & ROW1)==0) 
0282:  MOVF   F81,W
0284:  ANDLW  20
0286:  BNZ   028E
....................                row=1; 
0288:  MOVLW  01
028A:  MOVWF  1A
028C:  BRA    02A4
....................              else if((kbd & ROW2)==0) 
028E:  MOVF   F81,W
0290:  ANDLW  40
0292:  BNZ   029A
....................                row=2; 
0294:  MOVLW  02
0296:  MOVWF  1A
0298:  BRA    02A4
....................              else if((kbd & ROW3)==0) 
029A:  MOVF   F81,W
029C:  ANDLW  80
029E:  BNZ   02A4
....................                row=3; 
02A0:  MOVLW  03
02A2:  MOVWF  1A
....................              last_key =KEYS[row][col]; 
02A4:  MOVF   1A,W
02A6:  MULLW  04
02A8:  MOVF   FF3,W
02AA:  CLRF   1C
02AC:  MOVWF  1B
02AE:  CLRF   03
02B0:  MOVF   07,W
02B2:  ADDWF  1B,W
02B4:  MOVWF  01
02B6:  MOVF   1C,W
02B8:  ADDWFC 03,F
02BA:  MOVF   01,W
02BC:  MOVFF  FF2,1B
02C0:  BCF    FF2.7
02C2:  RCALL  0004
02C4:  BTFSC  1B.7
02C6:  BSF    FF2.7
02C8:  MOVWF  06
....................              kbd_down = true; 
02CA:  BSF    05.0
....................           } else { 
02CC:  BRA    02D8
....................              ++col; 
02CE:  INCF   07,F
....................              if(col==4) 
02D0:  MOVF   07,W
02D2:  SUBLW  04
02D4:  BNZ   02D8
....................                col=0; 
02D6:  CLRF   07
....................           } 
....................        } 
....................       kbd_call_count=0; 
02D8:  CLRF   04
....................    } 
....................   set_tris_kbd(ALL_PINS); 
02DA:  MOVLW  FF
02DC:  MOVWF  F93
....................   return(kchar); 
02DE:  MOVFF  19,01
02E2:  RETURN 0
.................... } 
....................  
.................... #include<math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
0FFE:  BCF    44.0
....................    y = x; 
1000:  MOVFF  38,3D
1004:  MOVFF  37,3C
1008:  MOVFF  36,3B
100C:  MOVFF  35,3A
....................  
....................    if (x < 0) 
1010:  MOVFF  38,5A
1014:  MOVFF  37,59
1018:  MOVFF  36,58
101C:  MOVFF  35,57
1020:  CLRF   5E
1022:  CLRF   5D
1024:  CLRF   5C
1026:  CLRF   5B
1028:  CALL   076A
102C:  BNC   1036
....................    { 
....................       s = 1; 
102E:  BSF    44.0
....................       y = -y; 
1030:  MOVF   3B,W
1032:  XORLW  80
1034:  MOVWF  3B
....................    } 
....................  
....................    if (y <= 32768.0) 
1036:  MOVFF  3D,5A
103A:  MOVFF  3C,59
103E:  MOVFF  3B,58
1042:  MOVFF  3A,57
1046:  CLRF   5E
1048:  CLRF   5D
104A:  CLRF   5C
104C:  MOVLW  8E
104E:  MOVWF  5B
1050:  CALL   076A
1054:  BC    1058
1056:  BNZ   1088
....................       res = (float32)(unsigned int16)y; 
1058:  MOVFF  3D,5A
105C:  MOVFF  3C,59
1060:  MOVFF  3B,58
1064:  MOVFF  3A,57
1068:  RCALL  093A
106A:  MOVFF  02,5C
106E:  MOVFF  01,5B
1072:  CALL   03F8
1076:  MOVFF  03,41
107A:  MOVFF  02,40
107E:  MOVFF  01,3F
1082:  MOVFF  00,3E
1086:  BRA    1218
....................  
....................  else if (y < 10000000.0) 
1088:  MOVFF  3D,5A
108C:  MOVFF  3C,59
1090:  MOVFF  3B,58
1094:  MOVFF  3A,57
1098:  MOVLW  80
109A:  MOVWF  5E
109C:  MOVLW  96
109E:  MOVWF  5D
10A0:  MOVLW  18
10A2:  MOVWF  5C
10A4:  MOVLW  96
10A6:  MOVWF  5B
10A8:  CALL   076A
10AC:  BTFSS  FD8.0
10AE:  BRA    1208
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
10B0:  MOVFF  3D,5E
10B4:  MOVFF  3C,5D
10B8:  MOVFF  3B,5C
10BC:  MOVFF  3A,5B
10C0:  CLRF   x62
10C2:  CLRF   x61
10C4:  CLRF   x60
10C6:  MOVLW  70
10C8:  MOVWF  5F
10CA:  CALL   0306
10CE:  MOVFF  03,5A
10D2:  MOVFF  02,59
10D6:  MOVFF  01,58
10DA:  MOVFF  00,57
10DE:  RCALL  093A
10E0:  MOVFF  02,43
10E4:  MOVFF  01,42
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
10E8:  MOVFF  3D,5E
10EC:  MOVFF  3C,5D
10F0:  MOVFF  3B,5C
10F4:  MOVFF  3A,5B
10F8:  CLRF   x62
10FA:  CLRF   x61
10FC:  CLRF   x60
10FE:  MOVLW  70
1100:  MOVWF  5F
1102:  CALL   0306
1106:  MOVFF  03,48
110A:  MOVFF  02,47
110E:  MOVFF  01,46
1112:  MOVFF  00,45
1116:  MOVFF  43,5C
111A:  MOVFF  42,5B
111E:  CALL   03F8
1122:  BSF    FD8.1
1124:  MOVFF  48,5E
1128:  MOVFF  47,5D
112C:  MOVFF  46,5C
1130:  MOVFF  45,5B
1134:  MOVFF  03,62
1138:  MOVFF  02,61
113C:  MOVFF  01,60
1140:  MOVFF  00,5F
1144:  CALL   042E
1148:  CLRF   5E
114A:  CLRF   5D
114C:  CLRF   5C
114E:  MOVLW  8E
1150:  MOVWF  5B
1152:  MOVFF  03,62
1156:  MOVFF  02,61
115A:  MOVFF  01,60
115E:  MOVFF  00,5F
1162:  CALL   0306
1166:  MOVFF  03,3D
116A:  MOVFF  02,3C
116E:  MOVFF  01,3B
1172:  MOVFF  00,3A
....................       res = 32768.0*(float32)l; 
1176:  MOVFF  43,5C
117A:  MOVFF  42,5B
117E:  CALL   03F8
1182:  CLRF   5E
1184:  CLRF   5D
1186:  CLRF   5C
1188:  MOVLW  8E
118A:  MOVWF  5B
118C:  MOVFF  03,62
1190:  MOVFF  02,61
1194:  MOVFF  01,60
1198:  MOVFF  00,5F
119C:  CALL   0306
11A0:  MOVFF  03,41
11A4:  MOVFF  02,40
11A8:  MOVFF  01,3F
11AC:  MOVFF  00,3E
....................       res += (float32)(unsigned int16)y; 
11B0:  MOVFF  3D,5A
11B4:  MOVFF  3C,59
11B8:  MOVFF  3B,58
11BC:  MOVFF  3A,57
11C0:  CALL   093A
11C4:  MOVFF  02,5C
11C8:  MOVFF  01,5B
11CC:  CALL   03F8
11D0:  BCF    FD8.1
11D2:  MOVFF  41,5E
11D6:  MOVFF  40,5D
11DA:  MOVFF  3F,5C
11DE:  MOVFF  3E,5B
11E2:  MOVFF  03,62
11E6:  MOVFF  02,61
11EA:  MOVFF  01,60
11EE:  MOVFF  00,5F
11F2:  CALL   042E
11F6:  MOVFF  03,41
11FA:  MOVFF  02,40
11FE:  MOVFF  01,3F
1202:  MOVFF  00,3E
....................    } 
1206:  BRA    1218
....................  
....................  else 
....................   res = y; 
1208:  MOVFF  3D,41
120C:  MOVFF  3C,40
1210:  MOVFF  3B,3F
1214:  MOVFF  3A,3E
....................  
....................  y = y - (float32)(unsigned int16)y; 
1218:  MOVFF  3D,5A
121C:  MOVFF  3C,59
1220:  MOVFF  3B,58
1224:  MOVFF  3A,57
1228:  CALL   093A
122C:  MOVFF  02,5C
1230:  MOVFF  01,5B
1234:  CALL   03F8
1238:  BSF    FD8.1
123A:  MOVFF  3D,5E
123E:  MOVFF  3C,5D
1242:  MOVFF  3B,5C
1246:  MOVFF  3A,5B
124A:  MOVFF  03,62
124E:  MOVFF  02,61
1252:  MOVFF  01,60
1256:  MOVFF  00,5F
125A:  CALL   042E
125E:  MOVFF  03,3D
1262:  MOVFF  02,3C
1266:  MOVFF  01,3B
126A:  MOVFF  00,3A
....................  
....................  if (s) 
126E:  BTFSS  44.0
1270:  BRA    1278
....................   res = -res; 
1272:  MOVF   3F,W
1274:  XORLW  80
1276:  MOVWF  3F
....................  
....................  if (y != 0) 
1278:  MOVFF  3D,5A
127C:  MOVFF  3C,59
1280:  MOVFF  3B,58
1284:  MOVFF  3A,57
1288:  CLRF   5E
128A:  CLRF   5D
128C:  CLRF   5C
128E:  CLRF   5B
1290:  CALL   076A
1294:  BZ    1306
....................  { 
....................   if (s == 1 && n == 0) 
1296:  BTFSS  44.0
1298:  BRA    12CE
129A:  MOVF   39,F
129C:  BNZ   12CE
....................    res -= 1.0; 
129E:  BSF    FD8.1
12A0:  MOVFF  41,5E
12A4:  MOVFF  40,5D
12A8:  MOVFF  3F,5C
12AC:  MOVFF  3E,5B
12B0:  CLRF   x62
12B2:  CLRF   x61
12B4:  CLRF   x60
12B6:  MOVLW  7F
12B8:  MOVWF  5F
12BA:  CALL   042E
12BE:  MOVFF  03,41
12C2:  MOVFF  02,40
12C6:  MOVFF  01,3F
12CA:  MOVFF  00,3E
....................  
....................   if (s == 0 && n == 1) 
12CE:  BTFSC  44.0
12D0:  BRA    1306
12D2:  DECFSZ 39,W
12D4:  BRA    1306
....................    res += 1.0; 
12D6:  BCF    FD8.1
12D8:  MOVFF  41,5E
12DC:  MOVFF  40,5D
12E0:  MOVFF  3F,5C
12E4:  MOVFF  3E,5B
12E8:  CLRF   x62
12EA:  CLRF   x61
12EC:  CLRF   x60
12EE:  MOVLW  7F
12F0:  MOVWF  5F
12F2:  CALL   042E
12F6:  MOVFF  03,41
12FA:  MOVFF  02,40
12FE:  MOVFF  01,3F
1302:  MOVFF  00,3E
....................  } 
....................  if (x == 0) 
1306:  MOVFF  38,5A
130A:  MOVFF  37,59
130E:  MOVFF  36,58
1312:  MOVFF  35,57
1316:  CLRF   5E
1318:  CLRF   5D
131A:  CLRF   5C
131C:  CLRF   5B
131E:  CALL   076A
1322:  BNZ   132C
....................     res = 0; 
1324:  CLRF   41
1326:  CLRF   40
1328:  CLRF   3F
132A:  CLRF   3E
....................  
....................  return (res); 
132C:  MOVFF  3E,00
1330:  MOVFF  3F,01
1334:  MOVFF  40,02
1338:  MOVFF  41,03
133C:  RETURN 0
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
*
1358:  MOVFF  34,38
135C:  MOVFF  33,37
1360:  MOVFF  32,36
1364:  MOVFF  31,35
1368:  CLRF   39
136A:  RCALL  0FFE
136C:  GOTO   1470 (RETURN)
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
133E:  MOVFF  34,38
1342:  MOVFF  33,37
1346:  MOVFF  32,36
134A:  MOVFF  31,35
134E:  MOVLW  01
1350:  MOVWF  39
1352:  RCALL  0FFE
1354:  GOTO   1428 (RETURN)
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
*
1370:  MOVFF  28,5A
1374:  MOVFF  27,59
1378:  MOVFF  26,58
137C:  MOVFF  25,57
1380:  CLRF   5E
1382:  CLRF   5D
1384:  CLRF   5C
1386:  CLRF   5B
1388:  CALL   076A
138C:  BTFSC  FD8.2
138E:  BRA    14CC
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
1390:  MOVFF  24,41
1394:  MOVFF  23,40
1398:  MOVFF  22,3F
139C:  MOVFF  21,3E
13A0:  MOVFF  28,45
13A4:  MOVFF  27,44
13A8:  MOVFF  26,43
13AC:  MOVFF  25,42
13B0:  CALL   07E0
13B4:  MOVFF  03,30
13B8:  MOVFF  02,2F
13BC:  MOVFF  01,2E
13C0:  MOVFF  00,2D
13C4:  MOVFF  03,5A
13C8:  MOVFF  02,59
13CC:  MOVFF  01,58
13D0:  MOVFF  00,57
13D4:  CLRF   5E
13D6:  CLRF   5D
13D8:  CLRF   5C
13DA:  CLRF   5B
13DC:  CALL   076A
13E0:  BNC   142A
13E2:  MOVFF  24,41
13E6:  MOVFF  23,40
13EA:  MOVFF  22,3F
13EE:  MOVFF  21,3E
13F2:  MOVFF  28,45
13F6:  MOVFF  27,44
13FA:  MOVFF  26,43
13FE:  MOVFF  25,42
1402:  CALL   07E0
1406:  MOVFF  03,30
140A:  MOVFF  02,2F
140E:  MOVFF  01,2E
1412:  MOVFF  00,2D
1416:  MOVFF  03,34
141A:  MOVFF  02,33
141E:  MOVFF  01,32
1422:  MOVFF  00,31
1426:  BRA    133E
1428:  BRA    1470
142A:  MOVFF  24,41
142E:  MOVFF  23,40
1432:  MOVFF  22,3F
1436:  MOVFF  21,3E
143A:  MOVFF  28,45
143E:  MOVFF  27,44
1442:  MOVFF  26,43
1446:  MOVFF  25,42
144A:  CALL   07E0
144E:  MOVFF  03,30
1452:  MOVFF  02,2F
1456:  MOVFF  01,2E
145A:  MOVFF  00,2D
145E:  MOVFF  03,34
1462:  MOVFF  02,33
1466:  MOVFF  01,32
146A:  MOVFF  00,31
146E:  BRA    1358
1470:  MOVFF  03,2C
1474:  MOVFF  02,2B
1478:  MOVFF  01,2A
147C:  MOVFF  00,29
....................       return(x-(i*y)); 
1480:  MOVFF  2C,5E
1484:  MOVFF  2B,5D
1488:  MOVFF  2A,5C
148C:  MOVFF  29,5B
1490:  MOVFF  28,62
1494:  MOVFF  27,61
1498:  MOVFF  26,60
149C:  MOVFF  25,5F
14A0:  CALL   0306
14A4:  BSF    FD8.1
14A6:  MOVFF  24,5E
14AA:  MOVFF  23,5D
14AE:  MOVFF  22,5C
14B2:  MOVFF  21,5B
14B6:  MOVFF  03,62
14BA:  MOVFF  02,61
14BE:  MOVFF  01,60
14C2:  MOVFF  00,5F
14C6:  CALL   042E
14CA:  BRA    14CC
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
14CC:  RETURN 0
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
*
1872:  MOVFF  28,5E
1876:  MOVFF  27,5D
187A:  MOVFF  26,5C
187E:  MOVFF  25,5B
1882:  MOVLW  3B
1884:  MOVWF  x62
1886:  MOVLW  AA
1888:  MOVWF  x61
188A:  MOVLW  38
188C:  MOVWF  x60
188E:  MOVLW  7F
1890:  MOVWF  5F
1892:  CALL   0306
1896:  MOVFF  03,5A
189A:  MOVFF  02,59
189E:  MOVFF  01,58
18A2:  MOVFF  00,57
18A6:  CALL   093A
18AA:  MOVFF  01,35
....................    s = 0; 
18AE:  BCF    36.0
....................    y = x; 
18B0:  MOVFF  28,2C
18B4:  MOVFF  27,2B
18B8:  MOVFF  26,2A
18BC:  MOVFF  25,29
....................  
....................    if (x < 0) 
18C0:  MOVFF  28,5A
18C4:  MOVFF  27,59
18C8:  MOVFF  26,58
18CC:  MOVFF  25,57
18D0:  CLRF   5E
18D2:  CLRF   5D
18D4:  CLRF   5C
18D6:  CLRF   5B
18D8:  CALL   076A
18DC:  BNC   18E8
....................    { 
....................       s = 1; 
18DE:  BSF    36.0
....................       n = -n; 
18E0:  NEGF   35
....................       y = -y; 
18E2:  MOVF   2A,W
18E4:  XORLW  80
18E6:  MOVWF  2A
....................    } 
....................  
....................    res = 0.0; 
18E8:  CLRF   30
18EA:  CLRF   2F
18EC:  CLRF   2E
18EE:  CLRF   2D
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
18F0:  CLRF   38
18F2:  MOVLW  2D
18F4:  MOVWF  FE9
18F6:  MOVFF  38,FEA
18FA:  MOVLW  7F
18FC:  ADDWF  35,W
18FE:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
1900:  MOVFF  2C,5E
1904:  MOVFF  2B,5D
1908:  MOVFF  2A,5C
190C:  MOVFF  29,5B
1910:  MOVLW  3B
1912:  MOVWF  x62
1914:  MOVLW  AA
1916:  MOVWF  x61
1918:  MOVLW  38
191A:  MOVWF  x60
191C:  MOVLW  7F
191E:  MOVWF  5F
1920:  CALL   0306
1924:  MOVFF  03,3A
1928:  MOVFF  02,39
192C:  MOVFF  01,38
1930:  MOVFF  00,37
1934:  CLRF   3C
1936:  MOVFF  35,3B
193A:  BTFSC  3B.7
193C:  DECF   3C,F
193E:  RCALL  14CE
1940:  BSF    FD8.1
1942:  MOVFF  3A,5E
1946:  MOVFF  39,5D
194A:  MOVFF  38,5C
194E:  MOVFF  37,5B
1952:  MOVFF  03,62
1956:  MOVFF  02,61
195A:  MOVFF  01,60
195E:  MOVFF  00,5F
1962:  CALL   042E
1966:  MOVFF  03,2C
196A:  MOVFF  02,2B
196E:  MOVFF  01,2A
1972:  MOVFF  00,29
....................  
....................    r = pe[0]*y + pe[1]; 
1976:  MOVLW  7C
1978:  MOVWF  5E
197A:  MOVLW  88
197C:  MOVWF  5D
197E:  MOVLW  59
1980:  MOVWF  5C
1982:  MOVLW  72
1984:  MOVWF  5B
1986:  MOVFF  2C,62
198A:  MOVFF  2B,61
198E:  MOVFF  2A,60
1992:  MOVFF  29,5F
1996:  CALL   0306
199A:  MOVFF  03,3A
199E:  MOVFF  02,39
19A2:  MOVFF  01,38
19A6:  MOVFF  00,37
19AA:  BCF    FD8.1
19AC:  MOVFF  03,5E
19B0:  MOVFF  02,5D
19B4:  MOVFF  01,5C
19B8:  MOVFF  00,5B
19BC:  MOVLW  E0
19BE:  MOVWF  x62
19C0:  MOVLW  97
19C2:  MOVWF  x61
19C4:  MOVLW  26
19C6:  MOVWF  x60
19C8:  MOVLW  75
19CA:  MOVWF  5F
19CC:  CALL   042E
19D0:  MOVFF  03,34
19D4:  MOVFF  02,33
19D8:  MOVFF  01,32
19DC:  MOVFF  00,31
....................    r = r*y + pe[2]; 
19E0:  MOVFF  34,5E
19E4:  MOVFF  33,5D
19E8:  MOVFF  32,5C
19EC:  MOVFF  31,5B
19F0:  MOVFF  2C,62
19F4:  MOVFF  2B,61
19F8:  MOVFF  2A,60
19FC:  MOVFF  29,5F
1A00:  CALL   0306
1A04:  MOVFF  03,3A
1A08:  MOVFF  02,39
1A0C:  MOVFF  01,38
1A10:  MOVFF  00,37
1A14:  BCF    FD8.1
1A16:  MOVFF  03,5E
1A1A:  MOVFF  02,5D
1A1E:  MOVFF  01,5C
1A22:  MOVFF  00,5B
1A26:  MOVLW  C4
1A28:  MOVWF  x62
1A2A:  MOVLW  1D
1A2C:  MOVWF  x61
1A2E:  MOVLW  1E
1A30:  MOVWF  x60
1A32:  MOVLW  78
1A34:  MOVWF  5F
1A36:  CALL   042E
1A3A:  MOVFF  03,34
1A3E:  MOVFF  02,33
1A42:  MOVFF  01,32
1A46:  MOVFF  00,31
....................    r = r*y + pe[3]; 
1A4A:  MOVFF  34,5E
1A4E:  MOVFF  33,5D
1A52:  MOVFF  32,5C
1A56:  MOVFF  31,5B
1A5A:  MOVFF  2C,62
1A5E:  MOVFF  2B,61
1A62:  MOVFF  2A,60
1A66:  MOVFF  29,5F
1A6A:  CALL   0306
1A6E:  MOVFF  03,3A
1A72:  MOVFF  02,39
1A76:  MOVFF  01,38
1A7A:  MOVFF  00,37
1A7E:  BCF    FD8.1
1A80:  MOVFF  03,5E
1A84:  MOVFF  02,5D
1A88:  MOVFF  01,5C
1A8C:  MOVFF  00,5B
1A90:  MOVLW  5E
1A92:  MOVWF  x62
1A94:  MOVLW  50
1A96:  MOVWF  x61
1A98:  MOVLW  63
1A9A:  MOVWF  x60
1A9C:  MOVLW  7A
1A9E:  MOVWF  5F
1AA0:  CALL   042E
1AA4:  MOVFF  03,34
1AA8:  MOVFF  02,33
1AAC:  MOVFF  01,32
1AB0:  MOVFF  00,31
....................    r = r*y + pe[4]; 
1AB4:  MOVFF  34,5E
1AB8:  MOVFF  33,5D
1ABC:  MOVFF  32,5C
1AC0:  MOVFF  31,5B
1AC4:  MOVFF  2C,62
1AC8:  MOVFF  2B,61
1ACC:  MOVFF  2A,60
1AD0:  MOVFF  29,5F
1AD4:  CALL   0306
1AD8:  MOVFF  03,3A
1ADC:  MOVFF  02,39
1AE0:  MOVFF  01,38
1AE4:  MOVFF  00,37
1AE8:  BCF    FD8.1
1AEA:  MOVFF  03,5E
1AEE:  MOVFF  02,5D
1AF2:  MOVFF  01,5C
1AF6:  MOVFF  00,5B
1AFA:  MOVLW  1A
1AFC:  MOVWF  x62
1AFE:  MOVLW  FE
1B00:  MOVWF  x61
1B02:  MOVLW  75
1B04:  MOVWF  x60
1B06:  MOVLW  7C
1B08:  MOVWF  5F
1B0A:  CALL   042E
1B0E:  MOVFF  03,34
1B12:  MOVFF  02,33
1B16:  MOVFF  01,32
1B1A:  MOVFF  00,31
....................    r = r*y + pe[5]; 
1B1E:  MOVFF  34,5E
1B22:  MOVFF  33,5D
1B26:  MOVFF  32,5C
1B2A:  MOVFF  31,5B
1B2E:  MOVFF  2C,62
1B32:  MOVFF  2B,61
1B36:  MOVFF  2A,60
1B3A:  MOVFF  29,5F
1B3E:  CALL   0306
1B42:  MOVFF  03,3A
1B46:  MOVFF  02,39
1B4A:  MOVFF  01,38
1B4E:  MOVFF  00,37
1B52:  BCF    FD8.1
1B54:  MOVFF  03,5E
1B58:  MOVFF  02,5D
1B5C:  MOVFF  01,5C
1B60:  MOVFF  00,5B
1B64:  MOVLW  18
1B66:  MOVWF  x62
1B68:  MOVLW  72
1B6A:  MOVWF  x61
1B6C:  MOVLW  31
1B6E:  MOVWF  x60
1B70:  MOVLW  7E
1B72:  MOVWF  5F
1B74:  CALL   042E
1B78:  MOVFF  03,34
1B7C:  MOVFF  02,33
1B80:  MOVFF  01,32
1B84:  MOVFF  00,31
....................  
....................    res = res*(1.0 + y*r); 
1B88:  MOVFF  2C,5E
1B8C:  MOVFF  2B,5D
1B90:  MOVFF  2A,5C
1B94:  MOVFF  29,5B
1B98:  MOVFF  34,62
1B9C:  MOVFF  33,61
1BA0:  MOVFF  32,60
1BA4:  MOVFF  31,5F
1BA8:  CALL   0306
1BAC:  BCF    FD8.1
1BAE:  CLRF   5E
1BB0:  CLRF   5D
1BB2:  CLRF   5C
1BB4:  MOVLW  7F
1BB6:  MOVWF  5B
1BB8:  MOVFF  03,62
1BBC:  MOVFF  02,61
1BC0:  MOVFF  01,60
1BC4:  MOVFF  00,5F
1BC8:  CALL   042E
1BCC:  MOVFF  30,5E
1BD0:  MOVFF  2F,5D
1BD4:  MOVFF  2E,5C
1BD8:  MOVFF  2D,5B
1BDC:  MOVFF  03,62
1BE0:  MOVFF  02,61
1BE4:  MOVFF  01,60
1BE8:  MOVFF  00,5F
1BEC:  CALL   0306
1BF0:  MOVFF  03,30
1BF4:  MOVFF  02,2F
1BF8:  MOVFF  01,2E
1BFC:  MOVFF  00,2D
....................  
....................    if (s) 
1C00:  BTFSS  36.0
1C02:  BRA    1C32
....................       res = 1.0/res; 
1C04:  CLRF   41
1C06:  CLRF   40
1C08:  CLRF   3F
1C0A:  MOVLW  7F
1C0C:  MOVWF  3E
1C0E:  MOVFF  30,45
1C12:  MOVFF  2F,44
1C16:  MOVFF  2E,43
1C1A:  MOVFF  2D,42
1C1E:  CALL   07E0
1C22:  MOVFF  03,30
1C26:  MOVFF  02,2F
1C2A:  MOVFF  01,2E
1C2E:  MOVFF  00,2D
....................    return(res); 
1C32:  MOVFF  2D,00
1C36:  MOVFF  2E,01
1C3A:  MOVFF  2F,02
1C3E:  MOVFF  30,03
1C42:  RETURN 0
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
1516:  MOVFF  28,2C
151A:  MOVFF  27,2B
151E:  MOVFF  26,2A
1522:  MOVFF  25,29
....................  
....................    if (y != 1.0) 
1526:  MOVFF  2C,5A
152A:  MOVFF  2B,59
152E:  MOVFF  2A,58
1532:  MOVFF  29,57
1536:  CLRF   5E
1538:  CLRF   5D
153A:  CLRF   5C
153C:  MOVLW  7F
153E:  MOVWF  5B
1540:  CALL   076A
1544:  BTFSC  FD8.2
1546:  BRA    1858
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
1548:  CLRF   3B
154A:  MOVLW  29
154C:  MOVWF  FE9
154E:  MOVFF  3B,FEA
1552:  MOVLW  7E
1554:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
1556:  BSF    FD8.1
1558:  MOVFF  2C,5E
155C:  MOVFF  2B,5D
1560:  MOVFF  2A,5C
1564:  MOVFF  29,5B
1568:  CLRF   x62
156A:  CLRF   x61
156C:  CLRF   x60
156E:  MOVLW  7F
1570:  MOVWF  5F
1572:  CALL   042E
1576:  MOVFF  03,3D
157A:  MOVFF  02,3C
157E:  MOVFF  01,3B
1582:  MOVFF  00,3A
1586:  BCF    FD8.1
1588:  MOVFF  2C,5E
158C:  MOVFF  2B,5D
1590:  MOVFF  2A,5C
1594:  MOVFF  29,5B
1598:  CLRF   x62
159A:  CLRF   x61
159C:  CLRF   x60
159E:  MOVLW  7F
15A0:  MOVWF  5F
15A2:  CALL   042E
15A6:  MOVFF  3D,41
15AA:  MOVFF  3C,40
15AE:  MOVFF  3B,3F
15B2:  MOVFF  3A,3E
15B6:  MOVFF  03,45
15BA:  MOVFF  02,44
15BE:  MOVFF  01,43
15C2:  MOVFF  00,42
15C6:  CALL   07E0
15CA:  MOVFF  03,2C
15CE:  MOVFF  02,2B
15D2:  MOVFF  01,2A
15D6:  MOVFF  00,29
....................  
....................       y2=y*y; 
15DA:  MOVFF  2C,5E
15DE:  MOVFF  2B,5D
15E2:  MOVFF  2A,5C
15E6:  MOVFF  29,5B
15EA:  MOVFF  2C,62
15EE:  MOVFF  2B,61
15F2:  MOVFF  2A,60
15F6:  MOVFF  29,5F
15FA:  CALL   0306
15FE:  MOVFF  03,38
1602:  MOVFF  02,37
1606:  MOVFF  01,36
160A:  MOVFF  00,35
....................  
....................       res = pl[0]*y2 + pl[1]; 
160E:  MOVLW  99
1610:  MOVWF  5E
1612:  MOVLW  47
1614:  MOVWF  5D
1616:  MOVLW  8A
1618:  MOVWF  5C
161A:  MOVLW  7F
161C:  MOVWF  5B
161E:  MOVFF  38,62
1622:  MOVFF  37,61
1626:  MOVFF  36,60
162A:  MOVFF  35,5F
162E:  CALL   0306
1632:  MOVFF  03,3D
1636:  MOVFF  02,3C
163A:  MOVFF  01,3B
163E:  MOVFF  00,3A
1642:  BCF    FD8.1
1644:  MOVFF  03,5E
1648:  MOVFF  02,5D
164C:  MOVFF  01,5C
1650:  MOVFF  00,5B
1654:  CLRF   x62
1656:  CLRF   x61
1658:  CLRF   x60
165A:  MOVLW  80
165C:  MOVWF  5F
165E:  CALL   042E
1662:  MOVFF  03,30
1666:  MOVFF  02,2F
166A:  MOVFF  01,2E
166E:  MOVFF  00,2D
....................  
....................       r = ql[0]*y2 + ql[1]; 
1672:  MOVLW  4C
1674:  MOVWF  5E
1676:  MOVLW  F3
1678:  MOVWF  5D
167A:  MOVLW  3A
167C:  MOVWF  5C
167E:  MOVLW  7B
1680:  MOVWF  5B
1682:  MOVFF  38,62
1686:  MOVFF  37,61
168A:  MOVFF  36,60
168E:  MOVFF  35,5F
1692:  CALL   0306
1696:  MOVFF  03,3D
169A:  MOVFF  02,3C
169E:  MOVFF  01,3B
16A2:  MOVFF  00,3A
16A6:  BCF    FD8.1
16A8:  MOVFF  03,5E
16AC:  MOVFF  02,5D
16B0:  MOVFF  01,5C
16B4:  MOVFF  00,5B
16B8:  MOVLW  2B
16BA:  MOVWF  x62
16BC:  MOVLW  9D
16BE:  MOVWF  x61
16C0:  MOVLW  DF
16C2:  MOVWF  x60
16C4:  MOVLW  7E
16C6:  MOVWF  5F
16C8:  CALL   042E
16CC:  MOVFF  03,34
16D0:  MOVFF  02,33
16D4:  MOVFF  01,32
16D8:  MOVFF  00,31
....................       r = r*y2 + 1.0; 
16DC:  MOVFF  34,5E
16E0:  MOVFF  33,5D
16E4:  MOVFF  32,5C
16E8:  MOVFF  31,5B
16EC:  MOVFF  38,62
16F0:  MOVFF  37,61
16F4:  MOVFF  36,60
16F8:  MOVFF  35,5F
16FC:  CALL   0306
1700:  MOVFF  03,3D
1704:  MOVFF  02,3C
1708:  MOVFF  01,3B
170C:  MOVFF  00,3A
1710:  BCF    FD8.1
1712:  MOVFF  03,5E
1716:  MOVFF  02,5D
171A:  MOVFF  01,5C
171E:  MOVFF  00,5B
1722:  CLRF   x62
1724:  CLRF   x61
1726:  CLRF   x60
1728:  MOVLW  7F
172A:  MOVWF  5F
172C:  CALL   042E
1730:  MOVFF  03,34
1734:  MOVFF  02,33
1738:  MOVFF  01,32
173C:  MOVFF  00,31
....................  
....................       res = y*res/r; 
1740:  MOVFF  2C,5E
1744:  MOVFF  2B,5D
1748:  MOVFF  2A,5C
174C:  MOVFF  29,5B
1750:  MOVFF  30,62
1754:  MOVFF  2F,61
1758:  MOVFF  2E,60
175C:  MOVFF  2D,5F
1760:  CALL   0306
1764:  MOVFF  03,3D
1768:  MOVFF  02,3C
176C:  MOVFF  01,3B
1770:  MOVFF  00,3A
1774:  MOVFF  03,41
1778:  MOVFF  02,40
177C:  MOVFF  01,3F
1780:  MOVFF  00,3E
1784:  MOVFF  34,45
1788:  MOVFF  33,44
178C:  MOVFF  32,43
1790:  MOVFF  31,42
1794:  CALL   07E0
1798:  MOVFF  03,30
179C:  MOVFF  02,2F
17A0:  MOVFF  01,2E
17A4:  MOVFF  00,2D
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
17A8:  CLRF   3B
17AA:  MOVLW  25
17AC:  MOVWF  FE9
17AE:  MOVFF  3B,FEA
17B2:  MOVLW  7E
17B4:  SUBWF  FEF,W
17B6:  MOVWF  39
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
17B8:  BTFSS  39.7
17BA:  BRA    17E0
....................          r = -(float32)-n; 
17BC:  MOVLW  00
17BE:  BSF    FD8.0
17C0:  SUBFWB 39,W
17C2:  CLRF   3C
17C4:  MOVWF  3B
17C6:  BTFSC  3B.7
17C8:  DECF   3C,F
17CA:  RCALL  14CE
17CC:  MOVFF  00,31
17D0:  MOVF   01,W
17D2:  XORLW  80
17D4:  MOVWF  32
17D6:  MOVFF  02,33
17DA:  MOVFF  03,34
17DE:  BRA    17FC
....................       else 
....................          r = (float32)n; 
17E0:  CLRF   3C
17E2:  MOVFF  39,3B
17E6:  BTFSC  3B.7
17E8:  DECF   3C,F
17EA:  RCALL  14CE
17EC:  MOVFF  03,34
17F0:  MOVFF  02,33
17F4:  MOVFF  01,32
17F8:  MOVFF  00,31
....................  
....................       res += r*LN2; 
17FC:  MOVFF  34,5E
1800:  MOVFF  33,5D
1804:  MOVFF  32,5C
1808:  MOVFF  31,5B
180C:  MOVLW  18
180E:  MOVWF  x62
1810:  MOVLW  72
1812:  MOVWF  x61
1814:  MOVLW  31
1816:  MOVWF  x60
1818:  MOVLW  7E
181A:  MOVWF  5F
181C:  CALL   0306
1820:  BCF    FD8.1
1822:  MOVFF  30,5E
1826:  MOVFF  2F,5D
182A:  MOVFF  2E,5C
182E:  MOVFF  2D,5B
1832:  MOVFF  03,62
1836:  MOVFF  02,61
183A:  MOVFF  01,60
183E:  MOVFF  00,5F
1842:  CALL   042E
1846:  MOVFF  03,30
184A:  MOVFF  02,2F
184E:  MOVFF  01,2E
1852:  MOVFF  00,2D
....................    } 
1856:  BRA    1860
....................  
....................    else 
....................       res = 0.0; 
1858:  CLRF   30
185A:  CLRF   2F
185C:  CLRF   2E
185E:  CLRF   2D
....................  
....................    return(res); 
1860:  MOVFF  2D,00
1864:  MOVFF  2E,01
1868:  MOVFF  2F,02
186C:  MOVFF  30,03
1870:  RETURN 0
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
*
1C44:  MOVFF  1C,5A
1C48:  MOVFF  1B,59
1C4C:  MOVFF  1A,58
1C50:  MOVFF  19,57
1C54:  CLRF   5E
1C56:  CLRF   5D
1C58:  CLRF   5C
1C5A:  CLRF   5B
1C5C:  CALL   076A
1C60:  BTFSS  FD8.0
1C62:  BRA    1DFE
1C64:  MOVFF  20,24
1C68:  MOVFF  1F,23
1C6C:  MOVFF  1E,22
1C70:  MOVFF  1D,21
1C74:  CLRF   28
1C76:  CLRF   27
1C78:  CLRF   26
1C7A:  MOVLW  7F
1C7C:  MOVWF  25
1C7E:  CALL   1370
1C82:  MOVFF  03,24
1C86:  MOVFF  02,23
1C8A:  MOVFF  01,22
1C8E:  MOVFF  00,21
1C92:  MOVFF  03,5A
1C96:  MOVFF  02,59
1C9A:  MOVFF  01,58
1C9E:  MOVFF  00,57
1CA2:  CLRF   5E
1CA4:  CLRF   5D
1CA6:  CLRF   5C
1CA8:  CLRF   5B
1CAA:  CALL   076A
1CAE:  BTFSS  FD8.2
1CB0:  BRA    1DFE
....................       if(fmod(y, 2) == 0) { 
1CB2:  MOVFF  20,24
1CB6:  MOVFF  1F,23
1CBA:  MOVFF  1E,22
1CBE:  MOVFF  1D,21
1CC2:  CLRF   28
1CC4:  CLRF   27
1CC6:  CLRF   26
1CC8:  MOVLW  80
1CCA:  MOVWF  25
1CCC:  CALL   1370
1CD0:  MOVFF  03,24
1CD4:  MOVFF  02,23
1CD8:  MOVFF  01,22
1CDC:  MOVFF  00,21
1CE0:  MOVFF  03,5A
1CE4:  MOVFF  02,59
1CE8:  MOVFF  01,58
1CEC:  MOVFF  00,57
1CF0:  CLRF   5E
1CF2:  CLRF   5D
1CF4:  CLRF   5C
1CF6:  CLRF   5B
1CF8:  CALL   076A
1CFC:  BNZ   1D7C
....................          return (exp(log(-x) * y)); 
1CFE:  MOVFF  19,21
1D02:  MOVF   1A,W
1D04:  XORLW  80
1D06:  MOVWF  22
1D08:  MOVFF  1B,23
1D0C:  MOVFF  1C,24
1D10:  MOVFF  1C,28
1D14:  MOVFF  1B,27
1D18:  MOVWF  26
1D1A:  MOVFF  19,25
1D1E:  CALL   1516
1D22:  MOVFF  03,24
1D26:  MOVFF  02,23
1D2A:  MOVFF  01,22
1D2E:  MOVFF  00,21
1D32:  MOVFF  03,5E
1D36:  MOVFF  02,5D
1D3A:  MOVFF  01,5C
1D3E:  MOVFF  00,5B
1D42:  MOVFF  20,62
1D46:  MOVFF  1F,61
1D4A:  MOVFF  1E,60
1D4E:  MOVFF  1D,5F
1D52:  CALL   0306
1D56:  MOVFF  03,24
1D5A:  MOVFF  02,23
1D5E:  MOVFF  01,22
1D62:  MOVFF  00,21
1D66:  MOVFF  03,28
1D6A:  MOVFF  02,27
1D6E:  MOVFF  01,26
1D72:  MOVFF  00,25
1D76:  RCALL  1872
1D78:  BRA    1F1C
....................       } else { 
1D7A:  BRA    1DFC
....................          return (-exp(log(-x) * y)); 
1D7C:  MOVFF  19,21
1D80:  MOVF   1A,W
1D82:  XORLW  80
1D84:  MOVWF  22
1D86:  MOVFF  1B,23
1D8A:  MOVFF  1C,24
1D8E:  MOVFF  1C,28
1D92:  MOVFF  1B,27
1D96:  MOVWF  26
1D98:  MOVFF  19,25
1D9C:  CALL   1516
1DA0:  MOVFF  03,24
1DA4:  MOVFF  02,23
1DA8:  MOVFF  01,22
1DAC:  MOVFF  00,21
1DB0:  MOVFF  03,5E
1DB4:  MOVFF  02,5D
1DB8:  MOVFF  01,5C
1DBC:  MOVFF  00,5B
1DC0:  MOVFF  20,62
1DC4:  MOVFF  1F,61
1DC8:  MOVFF  1E,60
1DCC:  MOVFF  1D,5F
1DD0:  CALL   0306
1DD4:  MOVFF  03,24
1DD8:  MOVFF  02,23
1DDC:  MOVFF  01,22
1DE0:  MOVFF  00,21
1DE4:  MOVFF  03,28
1DE8:  MOVFF  02,27
1DEC:  MOVFF  01,26
1DF0:  MOVFF  00,25
1DF4:  RCALL  1872
1DF6:  MOVLW  80
1DF8:  XORWF  01,F
1DFA:  BRA    1F1C
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
1DFC:  BRA    1F1C
1DFE:  MOVFF  1C,5A
1E02:  MOVFF  1B,59
1E06:  MOVFF  1A,58
1E0A:  MOVFF  19,57
1E0E:  CLRF   5E
1E10:  CLRF   5D
1E12:  CLRF   5C
1E14:  CLRF   5B
1E16:  CALL   076A
1E1A:  BNC   1E74
1E1C:  MOVFF  20,24
1E20:  MOVFF  1F,23
1E24:  MOVFF  1E,22
1E28:  MOVFF  1D,21
1E2C:  CLRF   28
1E2E:  CLRF   27
1E30:  CLRF   26
1E32:  MOVLW  7F
1E34:  MOVWF  25
1E36:  CALL   1370
1E3A:  MOVFF  03,24
1E3E:  MOVFF  02,23
1E42:  MOVFF  01,22
1E46:  MOVFF  00,21
1E4A:  MOVFF  03,5A
1E4E:  MOVFF  02,59
1E52:  MOVFF  01,58
1E56:  MOVFF  00,57
1E5A:  CLRF   5E
1E5C:  CLRF   5D
1E5E:  CLRF   5C
1E60:  CLRF   5B
1E62:  CALL   076A
1E66:  BZ    1E74
....................       return 0; 
1E68:  CLRF   00
1E6A:  CLRF   01
1E6C:  CLRF   02
1E6E:  CLRF   03
1E70:  BRA    1F1C
....................    } else { 
1E72:  BRA    1F1C
....................       if(x != 0 || 0 >= y) { 
1E74:  MOVFF  1C,5A
1E78:  MOVFF  1B,59
1E7C:  MOVFF  1A,58
1E80:  MOVFF  19,57
1E84:  CLRF   5E
1E86:  CLRF   5D
1E88:  CLRF   5C
1E8A:  CLRF   5B
1E8C:  CALL   076A
1E90:  BNZ   1EB2
1E92:  MOVFF  20,5A
1E96:  MOVFF  1F,59
1E9A:  MOVFF  1E,58
1E9E:  MOVFF  1D,57
1EA2:  CLRF   5E
1EA4:  CLRF   5D
1EA6:  CLRF   5C
1EA8:  CLRF   5B
1EAA:  CALL   076A
1EAE:  BC    1EB2
1EB0:  BNZ   1F1C
....................          return (exp(log(x) * y)); 
1EB2:  MOVFF  1C,28
1EB6:  MOVFF  1B,27
1EBA:  MOVFF  1A,26
1EBE:  MOVFF  19,25
1EC2:  CALL   1516
1EC6:  MOVFF  03,24
1ECA:  MOVFF  02,23
1ECE:  MOVFF  01,22
1ED2:  MOVFF  00,21
1ED6:  MOVFF  03,5E
1EDA:  MOVFF  02,5D
1EDE:  MOVFF  01,5C
1EE2:  MOVFF  00,5B
1EE6:  MOVFF  20,62
1EEA:  MOVFF  1F,61
1EEE:  MOVFF  1E,60
1EF2:  MOVFF  1D,5F
1EF6:  CALL   0306
1EFA:  MOVFF  03,24
1EFE:  MOVFF  02,23
1F02:  MOVFF  01,22
1F06:  MOVFF  00,21
1F0A:  MOVFF  03,28
1F0E:  MOVFF  02,27
1F12:  MOVFF  01,26
1F16:  MOVFF  00,25
1F1A:  RCALL  1872
....................       } 
....................    } 
1F1C:  GOTO   281A (RETURN)
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
0972:  CLRF   3C
0974:  CLRF   3B
0976:  CLRF   3A
0978:  MOVLW  7F
097A:  MOVWF  39
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
097C:  MOVLW  7E
097E:  MOVWF  43
0980:  MOVLW  80
0982:  MOVWF  44
0984:  CLRF   45
0986:  CLRF   46
0988:  MOVLW  7A
098A:  MOVWF  47
098C:  MOVLW  2A
098E:  MOVWF  48
0990:  MOVLW  AA
0992:  MOVWF  49
0994:  MOVLW  A3
0996:  MOVWF  4A
0998:  MOVLW  75
099A:  MOVWF  4B
099C:  MOVLW  B6
099E:  MOVWF  4C
09A0:  MOVLW  09
09A2:  MOVWF  4D
09A4:  MOVLW  B4
09A6:  MOVWF  4E
09A8:  MOVLW  6F
09AA:  MOVWF  4F
09AC:  MOVLW  4F
09AE:  MOVWF  50
09B0:  MOVLW  B6
09B2:  MOVWF  51
09B4:  MOVLW  AA
09B6:  MOVWF  52
09B8:  MOVLW  69
09BA:  MOVWF  53
09BC:  MOVLW  8B
09BE:  MOVWF  54
09C0:  MOVLW  F6
09C2:  MOVWF  55
09C4:  MOVLW  E8
09C6:  MOVWF  56
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
09C8:  MOVFF  30,5A
09CC:  MOVFF  2F,59
09D0:  MOVFF  2E,58
09D4:  MOVFF  2D,57
09D8:  CLRF   5E
09DA:  CLRF   5D
09DC:  CLRF   5C
09DE:  CLRF   5B
09E0:  RCALL  076A
09E2:  BNC   09EA
09E4:  MOVF   2E,W
09E6:  XORLW  80
09E8:  MOVWF  2E
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
09EA:  MOVFF  30,5E
09EE:  MOVFF  2F,5D
09F2:  MOVFF  2E,5C
09F6:  MOVFF  2D,5B
09FA:  MOVLW  83
09FC:  MOVWF  x62
09FE:  MOVLW  F9
0A00:  MOVWF  x61
0A02:  MOVLW  22
0A04:  MOVWF  x60
0A06:  MOVLW  7E
0A08:  MOVWF  5F
0A0A:  RCALL  0306
0A0C:  MOVFF  03,5A
0A10:  MOVFF  02,59
0A14:  MOVFF  01,58
0A18:  MOVFF  00,57
0A1C:  RCALL  093A
0A1E:  MOVFF  01,3D
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
0A22:  MOVFF  30,5E
0A26:  MOVFF  2F,5D
0A2A:  MOVFF  2E,5C
0A2E:  MOVFF  2D,5B
0A32:  MOVLW  83
0A34:  MOVWF  x62
0A36:  MOVLW  F9
0A38:  MOVWF  x61
0A3A:  MOVLW  22
0A3C:  MOVWF  x60
0A3E:  MOVLW  7E
0A40:  MOVWF  5F
0A42:  RCALL  0306
0A44:  MOVFF  03,5A
0A48:  MOVFF  02,59
0A4C:  MOVFF  01,58
0A50:  MOVFF  00,57
0A54:  CLRF   5C
0A56:  MOVFF  3D,5B
0A5A:  RCALL  03F8
0A5C:  BSF    FD8.1
0A5E:  MOVFF  5A,5E
0A62:  MOVFF  59,5D
0A66:  MOVFF  58,5C
0A6A:  MOVFF  57,5B
0A6E:  MOVFF  03,62
0A72:  MOVFF  02,61
0A76:  MOVFF  01,60
0A7A:  MOVFF  00,5F
0A7E:  RCALL  042E
0A80:  MOVFF  03,42
0A84:  MOVFF  02,41
0A88:  MOVFF  01,40
0A8C:  MOVFF  00,3F
....................    quad = quad % 4;                    // quadrant (0 to 3) 
0A90:  MOVLW  03
0A92:  ANDWF  3D,F
....................  
....................    if (quad == 0 || quad == 2) 
0A94:  MOVF   3D,F
0A96:  BZ    0A9E
0A98:  MOVF   3D,W
0A9A:  SUBLW  02
0A9C:  BNZ   0AD2
....................       t = frac * PI_DIV_BY_TWO; 
0A9E:  MOVFF  42,5E
0AA2:  MOVFF  41,5D
0AA6:  MOVFF  40,5C
0AAA:  MOVFF  3F,5B
0AAE:  MOVLW  DB
0AB0:  MOVWF  x62
0AB2:  MOVLW  0F
0AB4:  MOVWF  x61
0AB6:  MOVLW  49
0AB8:  MOVWF  x60
0ABA:  MOVLW  7F
0ABC:  MOVWF  5F
0ABE:  RCALL  0306
0AC0:  MOVFF  03,38
0AC4:  MOVFF  02,37
0AC8:  MOVFF  01,36
0ACC:  MOVFF  00,35
0AD0:  BRA    0B9C
....................    else if (quad == 1) 
0AD2:  DECFSZ 3D,W
0AD4:  BRA    0B3A
....................       t = (1-frac) * PI_DIV_BY_TWO; 
0AD6:  BSF    FD8.1
0AD8:  CLRF   5E
0ADA:  CLRF   5D
0ADC:  CLRF   5C
0ADE:  MOVLW  7F
0AE0:  MOVWF  5B
0AE2:  MOVFF  42,62
0AE6:  MOVFF  41,61
0AEA:  MOVFF  40,60
0AEE:  MOVFF  3F,5F
0AF2:  RCALL  042E
0AF4:  MOVFF  03,5A
0AF8:  MOVFF  02,59
0AFC:  MOVFF  01,58
0B00:  MOVFF  00,57
0B04:  MOVFF  03,5E
0B08:  MOVFF  02,5D
0B0C:  MOVFF  01,5C
0B10:  MOVFF  00,5B
0B14:  MOVLW  DB
0B16:  MOVWF  x62
0B18:  MOVLW  0F
0B1A:  MOVWF  x61
0B1C:  MOVLW  49
0B1E:  MOVWF  x60
0B20:  MOVLW  7F
0B22:  MOVWF  5F
0B24:  CALL   0306
0B28:  MOVFF  03,38
0B2C:  MOVFF  02,37
0B30:  MOVFF  01,36
0B34:  MOVFF  00,35
0B38:  BRA    0B9C
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
0B3A:  BSF    FD8.1
0B3C:  MOVFF  42,5E
0B40:  MOVFF  41,5D
0B44:  MOVFF  40,5C
0B48:  MOVFF  3F,5B
0B4C:  CLRF   x62
0B4E:  CLRF   x61
0B50:  CLRF   x60
0B52:  MOVLW  7F
0B54:  MOVWF  5F
0B56:  RCALL  042E
0B58:  MOVFF  03,5A
0B5C:  MOVFF  02,59
0B60:  MOVFF  01,58
0B64:  MOVFF  00,57
0B68:  MOVFF  03,5E
0B6C:  MOVFF  02,5D
0B70:  MOVFF  01,5C
0B74:  MOVFF  00,5B
0B78:  MOVLW  DB
0B7A:  MOVWF  x62
0B7C:  MOVLW  0F
0B7E:  MOVWF  x61
0B80:  MOVLW  49
0B82:  MOVWF  x60
0B84:  MOVLW  7F
0B86:  MOVWF  5F
0B88:  CALL   0306
0B8C:  MOVFF  03,38
0B90:  MOVFF  02,37
0B94:  MOVFF  01,36
0B98:  MOVFF  00,35
....................  
....................    y = 1.0; 
0B9C:  CLRF   34
0B9E:  CLRF   33
0BA0:  CLRF   32
0BA2:  MOVLW  7F
0BA4:  MOVWF  31
....................    t = t * t; 
0BA6:  MOVFF  38,5E
0BAA:  MOVFF  37,5D
0BAE:  MOVFF  36,5C
0BB2:  MOVFF  35,5B
0BB6:  MOVFF  38,62
0BBA:  MOVFF  37,61
0BBE:  MOVFF  36,60
0BC2:  MOVFF  35,5F
0BC6:  CALL   0306
0BCA:  MOVFF  03,38
0BCE:  MOVFF  02,37
0BD2:  MOVFF  01,36
0BD6:  MOVFF  00,35
....................    for (i = 0; i <= 4; i++) 
0BDA:  CLRF   3E
0BDC:  MOVF   3E,W
0BDE:  SUBLW  04
0BE0:  BNC   0CA6
....................    { 
....................       t2 = t2 * t; 
0BE2:  MOVFF  3C,5E
0BE6:  MOVFF  3B,5D
0BEA:  MOVFF  3A,5C
0BEE:  MOVFF  39,5B
0BF2:  MOVFF  38,62
0BF6:  MOVFF  37,61
0BFA:  MOVFF  36,60
0BFE:  MOVFF  35,5F
0C02:  CALL   0306
0C06:  MOVFF  03,3C
0C0A:  MOVFF  02,3B
0C0E:  MOVFF  01,3A
0C12:  MOVFF  00,39
....................       y = y + p[i] * t2; 
0C16:  MOVF   3E,W
0C18:  MULLW  04
0C1A:  MOVF   FF3,W
0C1C:  CLRF   03
0C1E:  ADDLW  43
0C20:  MOVWF  FE9
0C22:  MOVLW  00
0C24:  ADDWFC 03,W
0C26:  MOVWF  FEA
0C28:  MOVFF  FEF,57
0C2C:  MOVFF  FEC,58
0C30:  MOVFF  FEC,59
0C34:  MOVFF  FEC,5A
0C38:  MOVFF  5A,5E
0C3C:  MOVFF  59,5D
0C40:  MOVFF  58,5C
0C44:  MOVFF  57,5B
0C48:  MOVFF  3C,62
0C4C:  MOVFF  3B,61
0C50:  MOVFF  3A,60
0C54:  MOVFF  39,5F
0C58:  CALL   0306
0C5C:  MOVFF  FEA,58
0C60:  MOVFF  FE9,57
0C64:  BCF    FD8.1
0C66:  MOVFF  34,5E
0C6A:  MOVFF  33,5D
0C6E:  MOVFF  32,5C
0C72:  MOVFF  31,5B
0C76:  MOVFF  03,62
0C7A:  MOVFF  02,61
0C7E:  MOVFF  01,60
0C82:  MOVFF  00,5F
0C86:  CALL   042E
0C8A:  MOVFF  58,FEA
0C8E:  MOVFF  57,FE9
0C92:  MOVFF  03,34
0C96:  MOVFF  02,33
0C9A:  MOVFF  01,32
0C9E:  MOVFF  00,31
0CA2:  INCF   3E,F
0CA4:  BRA    0BDC
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
0CA6:  MOVF   3D,W
0CA8:  SUBLW  02
0CAA:  BZ    0CB0
0CAC:  DECFSZ 3D,W
0CAE:  BRA    0CB6
....................       y = -y;  // correct sign 
0CB0:  MOVF   32,W
0CB2:  XORLW  80
0CB4:  MOVWF  32
....................  
....................    return (y); 
0CB6:  MOVFF  31,00
0CBA:  MOVFF  32,01
0CBE:  MOVFF  33,02
0CC2:  MOVFF  34,03
0CC6:  RETURN 0
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
0CC8:  BSF    FD8.1
0CCA:  MOVFF  28,5E
0CCE:  MOVFF  27,5D
0CD2:  MOVFF  26,5C
0CD6:  MOVFF  25,5B
0CDA:  MOVLW  DB
0CDC:  MOVWF  x62
0CDE:  MOVLW  0F
0CE0:  MOVWF  x61
0CE2:  MOVLW  49
0CE4:  MOVWF  x60
0CE6:  MOVLW  7F
0CE8:  MOVWF  5F
0CEA:  CALL   042E
0CEE:  MOVFF  03,2C
0CF2:  MOVFF  02,2B
0CF6:  MOVFF  01,2A
0CFA:  MOVFF  00,29
0CFE:  MOVFF  03,30
0D02:  MOVFF  02,2F
0D06:  MOVFF  01,2E
0D0A:  MOVFF  00,2D
0D0E:  RCALL  0972
0D10:  RETURN 0
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
*
0F62:  MOVFF  1C,30
0F66:  MOVFF  1B,2F
0F6A:  MOVFF  1A,2E
0F6E:  MOVFF  19,2D
0F72:  RCALL  0972
0F74:  MOVFF  03,20
0F78:  MOVFF  02,1F
0F7C:  MOVFF  01,1E
0F80:  MOVFF  00,1D
....................    if (c == 0.0) 
0F84:  MOVFF  20,5A
0F88:  MOVFF  1F,59
0F8C:  MOVFF  1E,58
0F90:  MOVFF  1D,57
0F94:  CLRF   5E
0F96:  CLRF   5D
0F98:  CLRF   5C
0F9A:  CLRF   5B
0F9C:  CALL   076A
0FA0:  BNZ   0FB4
....................       return (1.0e+36); 
0FA2:  MOVLW  F6
0FA4:  MOVWF  00
0FA6:  MOVLW  40
0FA8:  MOVWF  01
0FAA:  MOVLW  97
0FAC:  MOVWF  02
0FAE:  MOVLW  CE
0FB0:  MOVWF  03
0FB2:  BRA    0FFA
....................  
....................    s = sin(x); 
0FB4:  MOVFF  1C,28
0FB8:  MOVFF  1B,27
0FBC:  MOVFF  1A,26
0FC0:  MOVFF  19,25
0FC4:  RCALL  0CC8
0FC6:  MOVFF  03,24
0FCA:  MOVFF  02,23
0FCE:  MOVFF  01,22
0FD2:  MOVFF  00,21
....................    return(s/c); 
0FD6:  MOVFF  24,41
0FDA:  MOVFF  23,40
0FDE:  MOVFF  22,3F
0FE2:  MOVFF  21,3E
0FE6:  MOVFF  20,45
0FEA:  MOVFF  1F,44
0FEE:  MOVFF  1E,43
0FF2:  MOVFF  1D,42
0FF6:  CALL   07E0
0FFA:  GOTO   269E (RETURN)
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... int X=0; 
.................... int Y=0; 
.................... float A=0; 
.................... float B=0; 
.................... float C=0; 
....................  
.................... void main() 
*
1F20:  CLRF   FF8
1F22:  BCF    FD0.7
1F24:  CLRF   08
1F26:  CLRF   09
1F28:  CLRF   0D
1F2A:  CLRF   0C
1F2C:  CLRF   0B
1F2E:  CLRF   0A
1F30:  CLRF   11
1F32:  CLRF   10
1F34:  CLRF   0F
1F36:  CLRF   0E
1F38:  CLRF   15
1F3A:  CLRF   14
1F3C:  CLRF   13
1F3E:  CLRF   12
1F40:  MOVF   FC1,W
1F42:  ANDLW  C0
1F44:  IORLW  0F
1F46:  MOVWF  FC1
1F48:  MOVLW  07
1F4A:  MOVWF  FB4
1F4C:  BCF    05.0
1F4E:  CLRF   04
1F50:  BCF    05.0
1F52:  CLRF   06
1F54:  CLRF   07
.................... { 
....................    char K; 
....................    int T; 
....................    lcd_init(); 
1F56:  GOTO   0118
....................    kbd_init(); 
1F5A:  GOTO   0190
....................    port_b_pullups(true); 
1F5E:  BCF    FF1.7
....................    int ban=0; 
1F60:  CLRF   18
....................     
....................    //pass 
....................   printf(lcd_putc,"Ingrese el pass"); 
1F62:  MOVLW  24
1F64:  MOVWF  FF6
1F66:  MOVLW  00
1F68:  MOVWF  FF7
1F6A:  CALL   0206
....................   do 
....................   { 
....................     
....................     K=kbd_getc(); 
1F6E:  CALL   0226
1F72:  MOVFF  01,16
....................       T=k-48; 
1F76:  MOVLW  30
1F78:  SUBWF  16,W
1F7A:  MOVWF  17
....................       if((K!=0)&&(K!='D')&&(k!='*')&&(k!='A')&&(k!='B')&&(k!='C')&&(k!='#')) 
1F7C:  MOVF   16,F
1F7E:  BZ    2036
1F80:  MOVF   16,W
1F82:  SUBLW  44
1F84:  BZ    2036
1F86:  MOVF   16,W
1F88:  SUBLW  2A
1F8A:  BZ    2036
1F8C:  MOVF   16,W
1F8E:  SUBLW  41
1F90:  BZ    2036
1F92:  MOVF   16,W
1F94:  SUBLW  42
1F96:  BZ    2036
1F98:  MOVF   16,W
1F9A:  SUBLW  43
1F9C:  BZ    2036
1F9E:  MOVF   16,W
1FA0:  SUBLW  23
1FA2:  BZ    2036
....................       { 
....................          A=(A*10)+T; 
1FA4:  MOVFF  0D,5E
1FA8:  MOVFF  0C,5D
1FAC:  MOVFF  0B,5C
1FB0:  MOVFF  0A,5B
1FB4:  CLRF   x62
1FB6:  CLRF   x61
1FB8:  MOVLW  20
1FBA:  MOVWF  x60
1FBC:  MOVLW  82
1FBE:  MOVWF  5F
1FC0:  CALL   0306
1FC4:  MOVFF  03,1C
1FC8:  MOVFF  02,1B
1FCC:  MOVFF  01,1A
1FD0:  MOVFF  00,19
1FD4:  CLRF   5C
1FD6:  MOVFF  17,5B
1FDA:  CALL   03F8
1FDE:  BCF    FD8.1
1FE0:  MOVFF  1C,5E
1FE4:  MOVFF  1B,5D
1FE8:  MOVFF  1A,5C
1FEC:  MOVFF  19,5B
1FF0:  MOVFF  03,62
1FF4:  MOVFF  02,61
1FF8:  MOVFF  01,60
1FFC:  MOVFF  00,5F
2000:  CALL   042E
2004:  MOVFF  03,0D
2008:  MOVFF  02,0C
200C:  MOVFF  01,0B
2010:  MOVFF  00,0A
....................          X++; 
2014:  INCF   08,F
....................          lcd_gotoxy(x,2); 
2016:  MOVFF  08,27
201A:  MOVLW  02
201C:  MOVWF  28
201E:  CALL   0194
....................          printf(lcd_putc,"%d",T); 
2022:  MOVFF  17,19
2026:  MOVLW  18
2028:  MOVWF  1A
202A:  CALL   06C0
....................          delay_ms(5); 
202E:  MOVLW  05
2030:  MOVWF  27
2032:  CALL   0054
....................       } 
....................       if(K=='#') 
2036:  MOVF   16,W
2038:  SUBLW  23
203A:  BNZ   207E
....................       { 
....................          if(A==1234) 
203C:  MOVFF  0D,5A
2040:  MOVFF  0C,59
2044:  MOVFF  0B,58
2048:  MOVFF  0A,57
204C:  CLRF   5E
204E:  MOVLW  40
2050:  MOVWF  5D
2052:  MOVLW  1A
2054:  MOVWF  5C
2056:  MOVLW  89
2058:  MOVWF  5B
205A:  CALL   076A
205E:  BNZ   207E
....................          { 
....................             X=0; 
2060:  CLRF   08
....................             A=0; 
2062:  CLRF   0D
2064:  CLRF   0C
2066:  CLRF   0B
2068:  CLRF   0A
....................             B=0; 
206A:  CLRF   11
206C:  CLRF   10
206E:  CLRF   0F
2070:  CLRF   0E
....................             C=0; 
2072:  CLRF   15
2074:  CLRF   14
2076:  CLRF   13
2078:  CLRF   12
....................             ban=1; 
207A:  MOVLW  01
207C:  MOVWF  18
....................          } 
....................           
....................       } 
....................        
....................   }while(ban!=1); 
207E:  DECFSZ 18,W
2080:  BRA    1F6E
....................     printf(lcd_putc,"\f"); 
2082:  MOVLW  0C
2084:  MOVWF  26
2086:  CALL   01B6
....................     printf(lcd_putc,"Acceso"); 
208A:  MOVLW  34
208C:  MOVWF  FF6
208E:  MOVLW  00
2090:  MOVWF  FF7
2092:  CALL   0206
....................     delay_ms(300); 
2096:  MOVLW  02
2098:  MOVWF  19
209A:  MOVLW  96
209C:  MOVWF  27
209E:  CALL   0054
20A2:  DECFSZ 19,F
20A4:  BRA    209A
....................      printf(lcd_putc,"\f"); 
20A6:  MOVLW  0C
20A8:  MOVWF  26
20AA:  CALL   01B6
....................    //////////////////// 
....................     
....................    do 
....................    { 
....................       K=kbd_getc(); 
20AE:  CALL   0226
20B2:  MOVFF  01,16
....................       T=k-48; 
20B6:  MOVLW  30
20B8:  SUBWF  16,W
20BA:  MOVWF  17
....................       if((K!=0)&&(K!='D')&&(k!='*')&&(k!='A')&&(k!='B')&&(k!='C')&&(k!='#')) 
20BC:  MOVF   16,F
20BE:  BZ    2176
20C0:  MOVF   16,W
20C2:  SUBLW  44
20C4:  BZ    2176
20C6:  MOVF   16,W
20C8:  SUBLW  2A
20CA:  BZ    2176
20CC:  MOVF   16,W
20CE:  SUBLW  41
20D0:  BZ    2176
20D2:  MOVF   16,W
20D4:  SUBLW  42
20D6:  BZ    2176
20D8:  MOVF   16,W
20DA:  SUBLW  43
20DC:  BZ    2176
20DE:  MOVF   16,W
20E0:  SUBLW  23
20E2:  BZ    2176
....................       { 
....................          A=(A*10)+T; 
20E4:  MOVFF  0D,5E
20E8:  MOVFF  0C,5D
20EC:  MOVFF  0B,5C
20F0:  MOVFF  0A,5B
20F4:  CLRF   x62
20F6:  CLRF   x61
20F8:  MOVLW  20
20FA:  MOVWF  x60
20FC:  MOVLW  82
20FE:  MOVWF  5F
2100:  CALL   0306
2104:  MOVFF  03,1C
2108:  MOVFF  02,1B
210C:  MOVFF  01,1A
2110:  MOVFF  00,19
2114:  CLRF   5C
2116:  MOVFF  17,5B
211A:  CALL   03F8
211E:  BCF    FD8.1
2120:  MOVFF  1C,5E
2124:  MOVFF  1B,5D
2128:  MOVFF  1A,5C
212C:  MOVFF  19,5B
2130:  MOVFF  03,62
2134:  MOVFF  02,61
2138:  MOVFF  01,60
213C:  MOVFF  00,5F
2140:  CALL   042E
2144:  MOVFF  03,0D
2148:  MOVFF  02,0C
214C:  MOVFF  01,0B
2150:  MOVFF  00,0A
....................          X++; 
2154:  INCF   08,F
....................          lcd_gotoxy(X,1); 
2156:  MOVFF  08,27
215A:  MOVLW  01
215C:  MOVWF  28
215E:  CALL   0194
....................          printf(lcd_putc,"%d",T); 
2162:  MOVFF  17,19
2166:  MOVLW  18
2168:  MOVWF  1A
216A:  CALL   06C0
....................          delay_ms(5); 
216E:  MOVLW  05
2170:  MOVWF  27
2172:  CALL   0054
....................       } 
....................        
....................       if(K=='*') 
2176:  MOVF   16,W
2178:  SUBLW  2A
217A:  BNZ   219E
....................       { 
....................          X=0; 
217C:  CLRF   08
....................          A=0; 
217E:  CLRF   0D
2180:  CLRF   0C
2182:  CLRF   0B
2184:  CLRF   0A
....................          B=0; 
2186:  CLRF   11
2188:  CLRF   10
218A:  CLRF   0F
218C:  CLRF   0E
....................          C=0; 
218E:  CLRF   15
2190:  CLRF   14
2192:  CLRF   13
2194:  CLRF   12
....................          printf(lcd_putc,"\f"); 
2196:  MOVLW  0C
2198:  MOVWF  26
219A:  CALL   01B6
....................       } 
....................        
....................        
....................        
....................       //seno// 
....................        
....................       if(K=='D') 
219E:  MOVF   16,W
21A0:  SUBLW  44
21A2:  BTFSS  FD8.2
21A4:  BRA    236E
....................       { 
....................          X++; 
21A6:  INCF   08,F
....................          Y=1; 
21A8:  MOVLW  01
21AA:  MOVWF  09
....................          printf(lcd_putc,"sen"); 
21AC:  MOVLW  3C
21AE:  MOVWF  FF6
21B0:  MOVLW  00
21B2:  MOVWF  FF7
21B4:  CALL   0206
....................           
....................          do 
....................          { 
....................             K=kbd_getc(); 
21B8:  CALL   0226
21BC:  MOVFF  01,16
....................             T=K-48; 
21C0:  MOVLW  30
21C2:  SUBWF  16,W
21C4:  MOVWF  17
....................             if((K!=0)&&(K!='D')&&(k!='*')&&(k!='A')&&(k!='B')&&(k!='C')&&(k!='#')) 
21C6:  MOVF   16,F
21C8:  BZ    2280
21CA:  MOVF   16,W
21CC:  SUBLW  44
21CE:  BZ    2280
21D0:  MOVF   16,W
21D2:  SUBLW  2A
21D4:  BZ    2280
21D6:  MOVF   16,W
21D8:  SUBLW  41
21DA:  BZ    2280
21DC:  MOVF   16,W
21DE:  SUBLW  42
21E0:  BZ    2280
21E2:  MOVF   16,W
21E4:  SUBLW  43
21E6:  BZ    2280
21E8:  MOVF   16,W
21EA:  SUBLW  23
21EC:  BZ    2280
....................             { 
....................                B=(B*10)+T; 
21EE:  MOVFF  11,5E
21F2:  MOVFF  10,5D
21F6:  MOVFF  0F,5C
21FA:  MOVFF  0E,5B
21FE:  CLRF   x62
2200:  CLRF   x61
2202:  MOVLW  20
2204:  MOVWF  x60
2206:  MOVLW  82
2208:  MOVWF  5F
220A:  CALL   0306
220E:  MOVFF  03,1C
2212:  MOVFF  02,1B
2216:  MOVFF  01,1A
221A:  MOVFF  00,19
221E:  CLRF   5C
2220:  MOVFF  17,5B
2224:  CALL   03F8
2228:  BCF    FD8.1
222A:  MOVFF  1C,5E
222E:  MOVFF  1B,5D
2232:  MOVFF  1A,5C
2236:  MOVFF  19,5B
223A:  MOVFF  03,62
223E:  MOVFF  02,61
2242:  MOVFF  01,60
2246:  MOVFF  00,5F
224A:  CALL   042E
224E:  MOVFF  03,11
2252:  MOVFF  02,10
2256:  MOVFF  01,0F
225A:  MOVFF  00,0E
....................                X++; 
225E:  INCF   08,F
....................                lcd_gotoxy(X,1); 
2260:  MOVFF  08,27
2264:  MOVLW  01
2266:  MOVWF  28
2268:  CALL   0194
....................                printf(lcd_putc,"%d",T); 
226C:  MOVFF  17,19
2270:  MOVLW  18
2272:  MOVWF  1A
2274:  CALL   06C0
....................                delay_ms(5); 
2278:  MOVLW  05
227A:  MOVWF  27
227C:  CALL   0054
....................             } 
....................              
....................             if(K=='#') 
2280:  MOVF   16,W
2282:  SUBLW  23
2284:  BNZ   233E
....................             { 
....................                C=A*3.1415926535/180; 
2286:  MOVFF  0D,5E
228A:  MOVFF  0C,5D
228E:  MOVFF  0B,5C
2292:  MOVFF  0A,5B
2296:  MOVLW  DB
2298:  MOVWF  x62
229A:  MOVLW  0F
229C:  MOVWF  x61
229E:  MOVLW  49
22A0:  MOVWF  x60
22A2:  MOVLW  80
22A4:  MOVWF  5F
22A6:  CALL   0306
22AA:  MOVFF  03,1C
22AE:  MOVFF  02,1B
22B2:  MOVFF  01,1A
22B6:  MOVFF  00,19
22BA:  MOVFF  03,41
22BE:  MOVFF  02,40
22C2:  MOVFF  01,3F
22C6:  MOVFF  00,3E
22CA:  CLRF   45
22CC:  CLRF   44
22CE:  MOVLW  34
22D0:  MOVWF  43
22D2:  MOVLW  86
22D4:  MOVWF  42
22D6:  CALL   07E0
22DA:  MOVFF  03,15
22DE:  MOVFF  02,14
22E2:  MOVFF  01,13
22E6:  MOVFF  00,12
....................                C=sin(C); 
22EA:  MOVFF  15,28
22EE:  MOVFF  14,27
22F2:  MOVFF  13,26
22F6:  MOVFF  12,25
22FA:  CALL   0CC8
22FE:  MOVFF  03,15
2302:  MOVFF  02,14
2306:  MOVFF  01,13
230A:  MOVFF  00,12
....................               // C=A+B; 
....................                lcd_gotoxy(1,2); 
230E:  MOVLW  01
2310:  MOVWF  27
2312:  MOVLW  02
2314:  MOVWF  28
2316:  CALL   0194
....................                printf(lcd_putc,"%.6f",C); 
231A:  MOVLW  89
231C:  MOVWF  FE9
231E:  MOVFF  15,1C
2322:  MOVFF  14,1B
2326:  MOVFF  13,1A
232A:  MOVFF  12,19
232E:  MOVLW  06
2330:  MOVWF  1D
2332:  CALL   0DE0
....................                delay_ms(5); 
2336:  MOVLW  05
2338:  MOVWF  27
233A:  CALL   0054
....................             } 
....................              
....................              
....................             if(K=='*') 
233E:  MOVF   16,W
2340:  SUBLW  2A
2342:  BNZ   2368
....................             { 
....................                Y=0; 
2344:  CLRF   09
....................                X=0; 
2346:  CLRF   08
....................                A=0; 
2348:  CLRF   0D
234A:  CLRF   0C
234C:  CLRF   0B
234E:  CLRF   0A
....................                B=0; 
2350:  CLRF   11
2352:  CLRF   10
2354:  CLRF   0F
2356:  CLRF   0E
....................                C=0; 
2358:  CLRF   15
235A:  CLRF   14
235C:  CLRF   13
235E:  CLRF   12
....................                printf(lcd_putc,"\f"); 
2360:  MOVLW  0C
2362:  MOVWF  26
2364:  CALL   01B6
....................       } 
....................              
....................          }while(Y==1); 
2368:  DECFSZ 09,W
236A:  BRA    236E
236C:  BRA    21B8
....................       } 
....................        
....................        
....................   
....................       //coseno // 
....................        
....................       if(K=='A') 
236E:  MOVF   16,W
2370:  SUBLW  41
2372:  BTFSS  FD8.2
2374:  BRA    253E
....................       { 
....................          X++; 
2376:  INCF   08,F
....................          Y=1; 
2378:  MOVLW  01
237A:  MOVWF  09
....................          printf(lcd_putc,"cos"); 
237C:  MOVLW  40
237E:  MOVWF  FF6
2380:  MOVLW  00
2382:  MOVWF  FF7
2384:  CALL   0206
....................           
....................          do 
....................          { 
....................             K=kbd_getc(); 
2388:  CALL   0226
238C:  MOVFF  01,16
....................             T=K-48; 
2390:  MOVLW  30
2392:  SUBWF  16,W
2394:  MOVWF  17
....................             if((K!=0)&&(K!='D')&&(k!='*')&&(k!='A')&&(k!='B')&&(k!='C')&&(k!='#')) 
2396:  MOVF   16,F
2398:  BZ    2450
239A:  MOVF   16,W
239C:  SUBLW  44
239E:  BZ    2450
23A0:  MOVF   16,W
23A2:  SUBLW  2A
23A4:  BZ    2450
23A6:  MOVF   16,W
23A8:  SUBLW  41
23AA:  BZ    2450
23AC:  MOVF   16,W
23AE:  SUBLW  42
23B0:  BZ    2450
23B2:  MOVF   16,W
23B4:  SUBLW  43
23B6:  BZ    2450
23B8:  MOVF   16,W
23BA:  SUBLW  23
23BC:  BZ    2450
....................             { 
....................                B=(B*10)+T; 
23BE:  MOVFF  11,5E
23C2:  MOVFF  10,5D
23C6:  MOVFF  0F,5C
23CA:  MOVFF  0E,5B
23CE:  CLRF   x62
23D0:  CLRF   x61
23D2:  MOVLW  20
23D4:  MOVWF  x60
23D6:  MOVLW  82
23D8:  MOVWF  5F
23DA:  CALL   0306
23DE:  MOVFF  03,1C
23E2:  MOVFF  02,1B
23E6:  MOVFF  01,1A
23EA:  MOVFF  00,19
23EE:  CLRF   5C
23F0:  MOVFF  17,5B
23F4:  CALL   03F8
23F8:  BCF    FD8.1
23FA:  MOVFF  1C,5E
23FE:  MOVFF  1B,5D
2402:  MOVFF  1A,5C
2406:  MOVFF  19,5B
240A:  MOVFF  03,62
240E:  MOVFF  02,61
2412:  MOVFF  01,60
2416:  MOVFF  00,5F
241A:  CALL   042E
241E:  MOVFF  03,11
2422:  MOVFF  02,10
2426:  MOVFF  01,0F
242A:  MOVFF  00,0E
....................                X++; 
242E:  INCF   08,F
....................                lcd_gotoxy(X,1); 
2430:  MOVFF  08,27
2434:  MOVLW  01
2436:  MOVWF  28
2438:  CALL   0194
....................                printf(lcd_putc,"%d",T); 
243C:  MOVFF  17,19
2440:  MOVLW  18
2442:  MOVWF  1A
2444:  CALL   06C0
....................                delay_ms(5); 
2448:  MOVLW  05
244A:  MOVWF  27
244C:  CALL   0054
....................             } 
....................              
....................             if(K=='#') 
2450:  MOVF   16,W
2452:  SUBLW  23
2454:  BNZ   250E
....................             { 
....................                 C=A*3.1415926535/180; 
2456:  MOVFF  0D,5E
245A:  MOVFF  0C,5D
245E:  MOVFF  0B,5C
2462:  MOVFF  0A,5B
2466:  MOVLW  DB
2468:  MOVWF  x62
246A:  MOVLW  0F
246C:  MOVWF  x61
246E:  MOVLW  49
2470:  MOVWF  x60
2472:  MOVLW  80
2474:  MOVWF  5F
2476:  CALL   0306
247A:  MOVFF  03,1C
247E:  MOVFF  02,1B
2482:  MOVFF  01,1A
2486:  MOVFF  00,19
248A:  MOVFF  03,41
248E:  MOVFF  02,40
2492:  MOVFF  01,3F
2496:  MOVFF  00,3E
249A:  CLRF   45
249C:  CLRF   44
249E:  MOVLW  34
24A0:  MOVWF  43
24A2:  MOVLW  86
24A4:  MOVWF  42
24A6:  CALL   07E0
24AA:  MOVFF  03,15
24AE:  MOVFF  02,14
24B2:  MOVFF  01,13
24B6:  MOVFF  00,12
....................                C=cos(C); 
24BA:  MOVFF  15,30
24BE:  MOVFF  14,2F
24C2:  MOVFF  13,2E
24C6:  MOVFF  12,2D
24CA:  CALL   0972
24CE:  MOVFF  03,15
24D2:  MOVFF  02,14
24D6:  MOVFF  01,13
24DA:  MOVFF  00,12
....................                //C=A-B; 
....................                lcd_gotoxy(1,2); 
24DE:  MOVLW  01
24E0:  MOVWF  27
24E2:  MOVLW  02
24E4:  MOVWF  28
24E6:  CALL   0194
....................                printf(lcd_putc,"%.6f",C); 
24EA:  MOVLW  89
24EC:  MOVWF  FE9
24EE:  MOVFF  15,1C
24F2:  MOVFF  14,1B
24F6:  MOVFF  13,1A
24FA:  MOVFF  12,19
24FE:  MOVLW  06
2500:  MOVWF  1D
2502:  CALL   0DE0
....................                delay_ms(5); 
2506:  MOVLW  05
2508:  MOVWF  27
250A:  CALL   0054
....................             } 
....................              
....................              
....................             if(K=='*') 
250E:  MOVF   16,W
2510:  SUBLW  2A
2512:  BNZ   2538
....................             { 
....................                Y=0; 
2514:  CLRF   09
....................                X=0; 
2516:  CLRF   08
....................                A=0; 
2518:  CLRF   0D
251A:  CLRF   0C
251C:  CLRF   0B
251E:  CLRF   0A
....................                B=0; 
2520:  CLRF   11
2522:  CLRF   10
2524:  CLRF   0F
2526:  CLRF   0E
....................                C=0; 
2528:  CLRF   15
252A:  CLRF   14
252C:  CLRF   13
252E:  CLRF   12
....................                printf(lcd_putc,"\f"); 
2530:  MOVLW  0C
2532:  MOVWF  26
2534:  CALL   01B6
....................       } 
....................              
....................          }while(Y==1); 
2538:  DECFSZ 09,W
253A:  BRA    253E
253C:  BRA    2388
....................       } 
....................        
....................       //Tangente // 
....................        
....................        
....................        
....................        
....................       if(K=='B') 
253E:  MOVF   16,W
2540:  SUBLW  42
2542:  BTFSS  FD8.2
2544:  BRA    270E
....................       { 
....................          X++; 
2546:  INCF   08,F
....................          Y=1; 
2548:  MOVLW  01
254A:  MOVWF  09
....................          printf(lcd_putc,"tan"); 
254C:  MOVLW  44
254E:  MOVWF  FF6
2550:  MOVLW  00
2552:  MOVWF  FF7
2554:  CALL   0206
....................           
....................          do 
....................          { 
....................             K=kbd_getc(); 
2558:  CALL   0226
255C:  MOVFF  01,16
....................             T=K-48; 
2560:  MOVLW  30
2562:  SUBWF  16,W
2564:  MOVWF  17
....................             if((K!=0)&&(K!='D')&&(k!='*')&&(k!='A')&&(k!='B')&&(k!='C')&&(k!='#')) 
2566:  MOVF   16,F
2568:  BZ    2620
256A:  MOVF   16,W
256C:  SUBLW  44
256E:  BZ    2620
2570:  MOVF   16,W
2572:  SUBLW  2A
2574:  BZ    2620
2576:  MOVF   16,W
2578:  SUBLW  41
257A:  BZ    2620
257C:  MOVF   16,W
257E:  SUBLW  42
2580:  BZ    2620
2582:  MOVF   16,W
2584:  SUBLW  43
2586:  BZ    2620
2588:  MOVF   16,W
258A:  SUBLW  23
258C:  BZ    2620
....................             { 
....................                B=(B*10)+T; 
258E:  MOVFF  11,5E
2592:  MOVFF  10,5D
2596:  MOVFF  0F,5C
259A:  MOVFF  0E,5B
259E:  CLRF   x62
25A0:  CLRF   x61
25A2:  MOVLW  20
25A4:  MOVWF  x60
25A6:  MOVLW  82
25A8:  MOVWF  5F
25AA:  CALL   0306
25AE:  MOVFF  03,1C
25B2:  MOVFF  02,1B
25B6:  MOVFF  01,1A
25BA:  MOVFF  00,19
25BE:  CLRF   5C
25C0:  MOVFF  17,5B
25C4:  CALL   03F8
25C8:  BCF    FD8.1
25CA:  MOVFF  1C,5E
25CE:  MOVFF  1B,5D
25D2:  MOVFF  1A,5C
25D6:  MOVFF  19,5B
25DA:  MOVFF  03,62
25DE:  MOVFF  02,61
25E2:  MOVFF  01,60
25E6:  MOVFF  00,5F
25EA:  CALL   042E
25EE:  MOVFF  03,11
25F2:  MOVFF  02,10
25F6:  MOVFF  01,0F
25FA:  MOVFF  00,0E
....................                X++; 
25FE:  INCF   08,F
....................                lcd_gotoxy(X,1); 
2600:  MOVFF  08,27
2604:  MOVLW  01
2606:  MOVWF  28
2608:  CALL   0194
....................                printf(lcd_putc,"%d",T); 
260C:  MOVFF  17,19
2610:  MOVLW  18
2612:  MOVWF  1A
2614:  CALL   06C0
....................                delay_ms(5); 
2618:  MOVLW  05
261A:  MOVWF  27
261C:  CALL   0054
....................             } 
....................              
....................             if(K=='#') 
2620:  MOVF   16,W
2622:  SUBLW  23
2624:  BNZ   26DE
....................             { 
....................                C=A*3.1415926535/180; 
2626:  MOVFF  0D,5E
262A:  MOVFF  0C,5D
262E:  MOVFF  0B,5C
2632:  MOVFF  0A,5B
2636:  MOVLW  DB
2638:  MOVWF  x62
263A:  MOVLW  0F
263C:  MOVWF  x61
263E:  MOVLW  49
2640:  MOVWF  x60
2642:  MOVLW  80
2644:  MOVWF  5F
2646:  CALL   0306
264A:  MOVFF  03,1C
264E:  MOVFF  02,1B
2652:  MOVFF  01,1A
2656:  MOVFF  00,19
265A:  MOVFF  03,41
265E:  MOVFF  02,40
2662:  MOVFF  01,3F
2666:  MOVFF  00,3E
266A:  CLRF   45
266C:  CLRF   44
266E:  MOVLW  34
2670:  MOVWF  43
2672:  MOVLW  86
2674:  MOVWF  42
2676:  CALL   07E0
267A:  MOVFF  03,15
267E:  MOVFF  02,14
2682:  MOVFF  01,13
2686:  MOVFF  00,12
....................                C=tan(C); 
268A:  MOVFF  15,1C
268E:  MOVFF  14,1B
2692:  MOVFF  13,1A
2696:  MOVFF  12,19
269A:  GOTO   0F62
269E:  MOVFF  03,15
26A2:  MOVFF  02,14
26A6:  MOVFF  01,13
26AA:  MOVFF  00,12
....................                //C=A*B; 
....................                lcd_gotoxy(1,2); 
26AE:  MOVLW  01
26B0:  MOVWF  27
26B2:  MOVLW  02
26B4:  MOVWF  28
26B6:  CALL   0194
....................                printf(lcd_putc,"%.6f",C); 
26BA:  MOVLW  89
26BC:  MOVWF  FE9
26BE:  MOVFF  15,1C
26C2:  MOVFF  14,1B
26C6:  MOVFF  13,1A
26CA:  MOVFF  12,19
26CE:  MOVLW  06
26D0:  MOVWF  1D
26D2:  CALL   0DE0
....................                delay_ms(5); 
26D6:  MOVLW  05
26D8:  MOVWF  27
26DA:  CALL   0054
....................             } 
....................              
....................              
....................             if(K=='*') 
26DE:  MOVF   16,W
26E0:  SUBLW  2A
26E2:  BNZ   2708
....................             { 
....................                Y=0; 
26E4:  CLRF   09
....................                X=0; 
26E6:  CLRF   08
....................                A=0; 
26E8:  CLRF   0D
26EA:  CLRF   0C
26EC:  CLRF   0B
26EE:  CLRF   0A
....................                B=0; 
26F0:  CLRF   11
26F2:  CLRF   10
26F4:  CLRF   0F
26F6:  CLRF   0E
....................                C=0; 
26F8:  CLRF   15
26FA:  CLRF   14
26FC:  CLRF   13
26FE:  CLRF   12
....................                printf(lcd_putc,"\f"); 
2700:  MOVLW  0C
2702:  MOVWF  26
2704:  CALL   01B6
....................       } 
....................              
....................          }while(Y==1); 
2708:  DECFSZ 09,W
270A:  BRA    270E
270C:  BRA    2558
....................       } 
....................        
....................        
....................       //Raiz cubica// 
....................        
....................        
....................       if(K=='C') 
270E:  MOVF   16,W
2710:  SUBLW  43
2712:  BTFSS  FD8.2
2714:  BRA    288A
....................       { 
....................          X++; 
2716:  INCF   08,F
....................          Y=1; 
2718:  MOVLW  01
271A:  MOVWF  09
....................          printf(lcd_putc,"raiz cubica"); 
271C:  MOVLW  48
271E:  MOVWF  FF6
2720:  MOVLW  00
2722:  MOVWF  FF7
2724:  CALL   0206
....................           
....................          do 
....................          { 
....................             K=kbd_getc(); 
2728:  CALL   0226
272C:  MOVFF  01,16
....................             T=K-48; 
2730:  MOVLW  30
2732:  SUBWF  16,W
2734:  MOVWF  17
....................             if((K!=0)&&(K!='D')&&(k!='*')&&(k!='A')&&(k!='B')&&(k!='C')&&(k!='#')) 
2736:  MOVF   16,F
2738:  BZ    27F0
273A:  MOVF   16,W
273C:  SUBLW  44
273E:  BZ    27F0
2740:  MOVF   16,W
2742:  SUBLW  2A
2744:  BZ    27F0
2746:  MOVF   16,W
2748:  SUBLW  41
274A:  BZ    27F0
274C:  MOVF   16,W
274E:  SUBLW  42
2750:  BZ    27F0
2752:  MOVF   16,W
2754:  SUBLW  43
2756:  BZ    27F0
2758:  MOVF   16,W
275A:  SUBLW  23
275C:  BZ    27F0
....................             { 
....................                B=(B*10)+T; 
275E:  MOVFF  11,5E
2762:  MOVFF  10,5D
2766:  MOVFF  0F,5C
276A:  MOVFF  0E,5B
276E:  CLRF   x62
2770:  CLRF   x61
2772:  MOVLW  20
2774:  MOVWF  x60
2776:  MOVLW  82
2778:  MOVWF  5F
277A:  CALL   0306
277E:  MOVFF  03,1C
2782:  MOVFF  02,1B
2786:  MOVFF  01,1A
278A:  MOVFF  00,19
278E:  CLRF   5C
2790:  MOVFF  17,5B
2794:  CALL   03F8
2798:  BCF    FD8.1
279A:  MOVFF  1C,5E
279E:  MOVFF  1B,5D
27A2:  MOVFF  1A,5C
27A6:  MOVFF  19,5B
27AA:  MOVFF  03,62
27AE:  MOVFF  02,61
27B2:  MOVFF  01,60
27B6:  MOVFF  00,5F
27BA:  CALL   042E
27BE:  MOVFF  03,11
27C2:  MOVFF  02,10
27C6:  MOVFF  01,0F
27CA:  MOVFF  00,0E
....................                X++; 
27CE:  INCF   08,F
....................                lcd_gotoxy(X,1); 
27D0:  MOVFF  08,27
27D4:  MOVLW  01
27D6:  MOVWF  28
27D8:  CALL   0194
....................                printf(lcd_putc,"%d",T); 
27DC:  MOVFF  17,19
27E0:  MOVLW  18
27E2:  MOVWF  1A
27E4:  CALL   06C0
....................                delay_ms(5); 
27E8:  MOVLW  05
27EA:  MOVWF  27
27EC:  CALL   0054
....................             } 
....................              
....................             if(K=='#') 
27F0:  MOVF   16,W
27F2:  SUBLW  23
27F4:  BNZ   285A
....................             { 
....................                C=pow(A,(double)1/3); 
27F6:  MOVFF  0D,1C
27FA:  MOVFF  0C,1B
27FE:  MOVFF  0B,1A
2802:  MOVFF  0A,19
2806:  MOVLW  AB
2808:  MOVWF  20
280A:  MOVLW  AA
280C:  MOVWF  1F
280E:  MOVLW  2A
2810:  MOVWF  1E
2812:  MOVLW  7D
2814:  MOVWF  1D
2816:  GOTO   1C44
281A:  MOVFF  03,15
281E:  MOVFF  02,14
2822:  MOVFF  01,13
2826:  MOVFF  00,12
....................                //C=A/B; 
....................                lcd_gotoxy(1,2); 
282A:  MOVLW  01
282C:  MOVWF  27
282E:  MOVLW  02
2830:  MOVWF  28
2832:  CALL   0194
....................                printf(lcd_putc,"%.3f",C); 
2836:  MOVLW  89
2838:  MOVWF  FE9
283A:  MOVFF  15,1C
283E:  MOVFF  14,1B
2842:  MOVFF  13,1A
2846:  MOVFF  12,19
284A:  MOVLW  03
284C:  MOVWF  1D
284E:  CALL   0DE0
....................                delay_ms(5); 
2852:  MOVLW  05
2854:  MOVWF  27
2856:  CALL   0054
....................             } 
....................              
....................              
....................             if(K=='*') 
285A:  MOVF   16,W
285C:  SUBLW  2A
285E:  BNZ   2884
....................             { 
....................                Y=0; 
2860:  CLRF   09
....................                X=0; 
2862:  CLRF   08
....................                A=0; 
2864:  CLRF   0D
2866:  CLRF   0C
2868:  CLRF   0B
286A:  CLRF   0A
....................                B=0; 
286C:  CLRF   11
286E:  CLRF   10
2870:  CLRF   0F
2872:  CLRF   0E
....................                C=0; 
2874:  CLRF   15
2876:  CLRF   14
2878:  CLRF   13
287A:  CLRF   12
....................                printf(lcd_putc,"\f"); 
287C:  MOVLW  0C
287E:  MOVWF  26
2880:  CALL   01B6
....................       } 
....................              
....................          }while(Y==1); 
2884:  DECFSZ 09,W
2886:  BRA    288A
2888:  BRA    2728
....................       } 
....................        
....................        
....................        
....................    }while(true); 
288A:  BRA    20AE
....................     
.................... } 
288C:  SLEEP 

Configuration Fuses:
   Word  1: CC3F   PLL12 CPUDIV4 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
